<npcs>
    <npc direction="RIGHT" hidden="false" id="1" name="Clark" sprite="10" x="2" y="11">
        <speech>Roark is our town's Gym Leader.</speech>
        <speech>He may be young, but he keeps the mine running safely and efficiently.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="2" name="Jenny" sprite="19" x="13" y="12">
        <speech>Roark is a user of Rock-type Pokemon.</speech>
        <speech>Don't you think Rock-type Pokemon are nice? I like how lumpy they are!</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="3" name="Theresa" sprite="12" x="28" y="26">
        <speech>I just bought a stuffed Eevee, it's so soft and plushy!!</speech>
    </npc>
    <npc direction="UP" hidden="false" id="4" name="Ben" sprite="39" x="31" y="20">
        <speech>Back in my day, there was a youth in a green outfit that would pick pots like these up...</speech>
        <speech>He would throw them in search of gemstones...</speech>
        <speech>I'm glad that kids are raised with better manners these days!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="5" name="" sprite="162" x="29" y="6">
        <speech>It's a fossil of the Pokemon 'Cradily' - it's a Rock and Grass type Pokemon, known for using the move Ancient Power!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="6" name="" sprite="162" x="34" y="5">
        <speech>It's a Helix Fossil - It was first discovered in the Kanto Region!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="7" name="Sally" sprite="82" x="18" y="6">
        <speech>This is my favourite exhibit here!</speech>
        <speech>It's a depicted scene of two ancient Pokemon duking it out.</speech>
        <speech>They've blocked it off since they are very valuable discoveries.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="8" name="" sprite="162" x="15" y="16">
        <speech>It's an exhibit featuring a Dawn and Dusk Stone!</speech>
        <speech>They are evolutionary stones used to evolve certain Pokemon!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="9" name="" sprite="162" x="16" y="16">
        <speech>It's an exhibit featuring a Dawn and Dusk Stone!</speech>
        <speech>They are Evolutionary stones used to evolve certain Pokemon!</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="10" name="" sprite="162" x="23" y="17">
        <speech>It's a fossil of the Pokemon 'Aurorus'.</speech>
        <speech>Aurorus is the evolution of the Pokemon 'Amaura' - which typically is found as a Sail Fossil in modern times.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="11" name="" sprite="162" x="23" y="12">
        <speech>It's a fossil of the Pokemon 'Tyrantrum'</speech>
        <speech>It's the evolution of the Pokemon 'Tyrunt' - which is typically found as a Jaw Fossil in modern times.</speech>
    </npc>
</npcs>
