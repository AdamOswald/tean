<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Hi, $PLAYER_NAME! How's your Pokédex coming along?</speech>
            <speech>Me? I'm somewhere between fantastic and, uh, hopeless...</speech>
            <speech>But this isn't about me! I've got something nice for you.</speech>
        </speeches>
        <speeches id="2">
            <speech>This is a Vs. Seeker with which you can find Trainers who want a rematch with you.</speech>
            <speech>Let's keep working on our Pokédexes. Professor Rowan is counting on us!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>You need 2 badges to go any further.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Go, my precious Pokémon! To battle! Rush the enemy!</speech>
        </speeches>
        <speeches id="2">
            <speech>I won't cry... I won't. Someday, I will win.</speech>
        </speeches>
        <speeches id="3">
            <speech>I won't cry... I won't. Someday, I will win.</speech>
        </speeches>
        <speeches id="4">
            <speech>My Pokémon are the mightiest! I shall carve my name in history!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Preschooler gonna battle you! Oh yeah! Nice to meet you.</speech>
        </speeches>
        <speeches id="2">
            <speech>Da Preschooler lost! Tank you anyways!</speech>
        </speeches>
        <speeches id="3">
            <speech>Da Preschooler lost! Tank you anyways!</speech>
        </speeches>
        <speeches id="4">
            <speech>Little baby is a winna! Tank you! Tank you!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>I am no mere Hiker. Call me an alpinist.</speech>
        </speeches>
        <speeches id="2">
            <speech>A specialist in mountainous matters. That's an alpinist.</speech>
        </speeches>
        <speeches id="3">
            <speech>A specialist in mountainous matters. That's an alpinist.</speech>
        </speeches>
        <speeches id="4">
            <speech>A mountain maniac like me is properly called an alpinist.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>No need to waste time saying hello. Bring it on whenever you're ready!</speech>
        </speeches>
        <speeches id="2">
            <speech>I won't lose next time! Let's battle again sometime!</speech>
        </speeches>
        <speeches id="3">
            <speech>I won't lose next time! Let's battle again sometime!</speech>
        </speeches>
        <speeches id="4">
            <speech>What a match! I'm quite satisfied with the result.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>If you want to reach the peak as a Trainer, you'll have to climb over me!</speech>
        </speeches>
        <speeches id="2">
            <speech>Go! You've gotta go! Go on and leave me!</speech>
        </speeches>
        <speeches id="3">
            <speech>Go! You've gotta go! Go on and leave me!</speech>
        </speeches>
        <speeches id="4">
            <speech>Even if you run into me disastrously, there's no rescue team on its way!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>The adrenaline is pumping in my team! Me, too! I'll make this an awesome battle!</speech>
        </speeches>
        <speeches id="2">
            <speech>I did what I came to do, and this is how it turned out. There's nothing else to say.</speech>
        </speeches>
        <speeches id="3">
            <speech>I did what I came to do, and this is how it turned out. There's nothing else to say.</speech>
        </speeches>
        <speeches id="4">
            <speech>How about it? We're awesome, right? You were able to explode, weren't you?</speech>
        </speeches>
    </conversation>
    <npc direction="LEFT" hidden="false" id="1" name="Cameron" sprite="32" x="25" y="17">
        <speech>You see this mudslide here? You can use a Bike to ride up it!</speech>
        <speech>You can walk down a mudslide but you can't go back up without a bike! Don't forget!</speech>
    </npc>
    <movingNpc direction="UP" id="2" name="Donald" shouldSleep="" speed="1" sprite="34" type="npc" x="16" y="13">
        <path>UPx3, DOWNx3</path>
        <onCollisionSpeech gap="4">Please don't get in my way!</onCollisionSpeech>
        <speech>I'm hunting for an adamant Machop!</speech>
    </movingNpc>
    <movingNpc direction="RIGHT" id="3" name="Machop" shouldSleep="" speed="1" sprite="66" type="pokemon" x="4" y="9">
        <path>RIGHTx1, LEFTx1</path>
        <onCollisionSpeech gap="4">Machop!</onCollisionSpeech>
        <speech>Chop!</speech>
    </movingNpc>
    <conversation id="13">
        <speeches id="2">
            <speech>Hi! I'm a PBO Tutorial campaign clown. Let's roll out my question!</speech>
            <speech>Can you find Aroma Ladies in some maps to heal your Pokemon?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's not the correct answer. Let's try again.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ding-ding!</speech>
            <speech>You're absolutely correct.</speech>
            <speech>There are some maps with some very kind ladies who will heal your Pokemon!</speech>
            <speech>Don't forget to thank them!</speech>
        </speeches>
        <speeches id="5">
            <speech>Here you go! Please accept this Super Potion!</speech>
            <speech>It restores the HP of a Pokémon by 50 points.</speech>
        </speeches>
    </conversation>
</npcs>
