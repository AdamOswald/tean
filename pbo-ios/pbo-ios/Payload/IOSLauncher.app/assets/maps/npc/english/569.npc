<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>What kind of Pokémon do you like? Hey, come on, show me!</speech>
        </speeches>
        <speeches id="2">
            <speech>Your taste in Pokémon is truly awful, but you are a first-class Trainer!</speech>
        </speeches>
        <speeches id="3">
            <speech>Your taste in Pokémon is truly awful, but you are a first-class Trainer!</speech>
        </speeches>
        <speeches id="4">
            <speech>Your taste in Pokémon is wonderful, but you are a disappointment as a Trainer.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>It's merely a Pokémon battle, right? Why so serious?</speech>
        </speeches>
        <speeches id="2">
            <speech>It's not like you really lose anything when you lose. As long as you enjoy it, that's enough.</speech>
        </speeches>
        <speeches id="3">
            <speech>It's not like you really lose anything when you lose. As long as you enjoy it, that's enough.</speech>
        </speeches>
        <speeches id="4">
            <speech>So what if you lose? It's not like there's any money in winning.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>You don't have to try to impress me. You can lose against me.</speech>
        </speeches>
        <speeches id="2">
            <speech>I did what I came to do, and this is how it turned out. There's nothing else to say.</speech>
        </speeches>
        <speeches id="3">
            <speech>I did what I came to do, and this is how it turned out. There's nothing else to say.</speech>
        </speeches>
        <speeches id="4">
            <speech>It's hard to say good-bye, but we are running out of time...</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>To challenge me you must be a reckless, fearless person who doesn't know his/her place!</speech>
        </speeches>
        <speeches id="2">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="3">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="4">
            <speech>Hmmph... To challenge me must mean that even ignorance has its limit!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Ahhh, a Trainer who looks gorgeous! I hope your battle is just as beautiful.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh my, our battle was just as gorgeous. I feel drawn to you.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh my, our battle was just as gorgeous. I feel drawn to you.</speech>
        </speeches>
        <speeches id="4">
            <speech>Such a looker lost to me?! I'm a little disappointed.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>The main character of this story... I'll tell you who it is!</speech>
        </speeches>
        <speeches id="2">
            <speech>You have to be strong inside when there aren't many people who are stronger than you on the outside...</speech>
        </speeches>
        <speeches id="3">
            <speech>You have to be strong inside when there aren't many people who are stronger than you on the outside...</speech>
        </speeches>
        <speeches id="4">
            <speech>Of course, you are the main character!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Tea Or Coffee ?</speech>
        </speeches>
        <speeches id="2">
            <speech>You like Coffee just like me! i'm watching over you</speech>
        </speeches>
        <speeches id="3">
            <speech>You like Coffee just like me! i'm watching over you</speech>
        </speeches>
        <speeches id="4">
            <speech>Tea is no good</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>My last ever battle... That's the way I'd like us to view this match...</speech>
        </speeches>
        <speeches id="2">
            <speech>It's been fun... Let's have another last battle again someday...</speech>
        </speeches>
        <speeches id="3">
            <speech>It's been fun... Let's have another last battle again someday...</speech>
        </speeches>
        <speeches id="4">
            <speech>We will meet again someday... Heh. If only that were true...</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>I dont think it will get any worse for me so let's see</speech>
        </speeches>
        <speeches id="2">
            <speech>I did not expect this outcome.</speech>
        </speeches>
        <speeches id="3">
            <speech>I did not expect this outcome.</speech>
        </speeches>
        <speeches id="4">
            <speech>This is life, you cant beat the protagonist</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>I'm working very hard, but that doesn't mean that I'm strong.</speech>
        </speeches>
        <speeches id="2">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="3">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="4">
            <speech>What?! Even I can lose?! But I'm a battling genius!</speech>
        </speeches>
    </conversation>
</npcs>
