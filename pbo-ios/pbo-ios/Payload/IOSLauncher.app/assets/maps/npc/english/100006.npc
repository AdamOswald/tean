<npcs>
    <conversation id="1" canSkip="false">
        <speeches id="1">
            <speech>What's your name and what are you doing here?</speech>
            <speech>I see $PLAYER_NAME. That is very optimistic.</speech>
            <speech>The spirit world used to be full of peace. The spirits of those who pass away enters the spirit world and live happily thereafter.</speech>
            <speech>Although Chamunda is trying to take over the spirit world absorbing all the soul leaving the world abandoned.</speech><!--CHANGED-->
            <speech>The only way to restore it back to peace is by finding and defeating her before she captures Giratina.</speech><!--CHANGED-->
            <speech>I can not help much now as my Mismagius has gone missing... It holds the key to many of your questions.</speech><!--CHANGED-->
        </speeches>
        <speeches id="2">
            <speech>Splendid! You found my Mismagius.</speech>
            <speech>*Magiiii Mag Mag Magiiiii*</speech>
            <speech>Fighting Chamunda is not easy. Only a trainer with Delphox holding "Fiery Witch Wand" can pass the barrier he has put around himself.</speech><!--CHANGED-->
            <speech>Sadly there was only one Fiery Witch Wand which was shattered into multiple fragments, when the devil showed up.</speech>
            <speech>Although I do know how to assemble "Fiery Witch Wand Fragments" to form a Witch Wand.</speech><!--CHANGED-->
            <speech>I know many have found those fragments scattered around Spirit World.</speech><!--CHANGED-->
            <speech>If you get 10 of those fragments, I can turn them into a Fiery Witch Wand which in turn will let you pass that barrier.</speech>
        </speeches>
    </conversation>

    <conversation id="2" canSkip="false">
        <speeches id="1">
            <speech>Fighting that witch is not easy. Only a trainer with Delphox holding "Fiery Witch Wand" can pass the barrier he has put around himself.</speech>
            <speech>Sadly I do not have access to that Witch Wand anymore. Although I do know how to assemble "Fiery Witch Wand Fragments" to form a Witch Wand.</speech>
            <speech>I know many have found those fragments scattered around Spirit World.</speech>
            <speech>If you get 10 of those fragments, I can turn them into a Fiery Witch Wand which in turn will let you pass that barrier.</speech>
        </speeches>
        <speeches id="2">
            <speech>Do you want to hand over those Fragments to me?</speech>
        </speeches>
        <speeches id="3">
            <speech>An ordinary trainer cannot bear the wand anyway.</speech>
        </speeches>
        <speeches id="4">
            <speech>Here, have this Fiery Witch Wand. Defeat her before he captures the Giratina.</speech><!--CHANGED-->
            <speech>Once the devil is defeated, The Spirit world will be free of all the evil and the spirits will once again roam free happily.</speech><!--CHANGED-->
            <speech>Good Luck.</speech>
        </speeches>
        <speeches id="5">
            <speech>Here, have this Fiery Witch Wand. Defeat him before he captures the Giratina.</speech><!--CHANGED-->
            <speech>Once the devil is defeated, The Spirit world will be free of all the evil and the spirits will once again roam free happily.</speech><!--CHANGED-->
            <speech>Good Luck.</speech>
        </speeches>
    </conversation>


    <conversation id="3" canSkip="false">
        <speeches id="1">
            <speech>I see that you defeated Chamunda. That is a very commendable and near to impossible task.</speech>
            <speech>Although to proceed further you need a space in your party.</speech>
        </speeches>
        <speeches id="2">
            <speech>I see that you defeated Chamunda. That is a very commendable and near to impossible task.</speech>
            <speech>It's sad that he managed to capture Giratina. Giratina is the only force which now stands in between Spirit World and peace.</speech> <!--CHANGED-->
            <speech>Although defeating that Giratina (which is been controlled by Chamunda) is not an easy task.</speech>
            <speech>It will destroy anything in its path.</speech>
            <speech>Only a pokemon who can learn a "Mystical Power" while holding the Fiery Witch Wand can challenge a possessed Giratina.</speech>
            <speech>You see this Fennekin?</speech>
            <speech>This Fennekin is the one which Chamunda captured.</speech>
            <speech>Fennekin is the only pokemon which has the ability to learn the "Mystical Power" to challenge the Giratina and restore the Spirit World back.</speech>
            <speech>Do you wish to take control over this little Fennekin and train it until it learns it's "Mystical Power" to be able to defeat Giratina?</speech>
        </speeches>
        <speeches id="3">
            <speech>You lack the sheer will and determination.</speech>
        </speeches>
        <speeches id="4">
            <speech>Fennekin is the only pokemon which has the ability to learn the "Mystical Power" to challenge the Giratina and restore the Spirit World back.</speech>
            <speech>I wish you all the luck to defeat Giratina $PLAYER_NAME</speech>
        </speeches>
        <speeches id="5">
            <speech>Fennekin is the only pokemon which has the ability to learn the "Mystical Power" to challenge the Giratina and restore the Spirit World back.</speech>
            <speech>I wish you all the luck to defeat Giratina $PLAYER_NAME</speech>
        </speeches>
    </conversation>

    <conversation id="4" canSkip="false">
        <speeches id="1">
            <speech>Splendid! Amazing!</speech>
            <speech>You defeated Giratina! I had lost all the hopes and felt that was never going to happen.</speech>
            <speech>As a token of appreciation, feel free to keep that Delphox with you it seems Delphox wouldn't have it any other way.</speech>
            <speech>It seems very happy with you and seems to acknowledge you.</speech>
            <speech>Now I will do my magic and restore the entire Spirit World back.</speech>
            <speech>By the way I should tell you one thing before I go.</speech>
            <speech>I am the same person who warped you to the spirit world.</speech>
            <speech>Yes. I am from future and I saw what happened in my dimension. I saw potential in you, and I was not wrong. Thank you for saving my world.</speech>
            <speech>Oh and before I go, I should tell you that the world is now protected by Yveltal, so this should not happen again.</speech>
            <speech>It will help maintain peace and harmony here.</speech>
            <speech>I bid you farewell young trainer.</speech>
        </speeches>
    </conversation>

    <!--Já agora te vou contar uma coisa antes de partir.
Sou a mesma pessoa que o levou para o mundo dos espíritos.
Sim. Eu sou do futuro e vi o que aconteceu na minha dimensão. Eu vi potencial em você e não estava enganado. Obrigado por salvar o meu mundo-->
</npcs>