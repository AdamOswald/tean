<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I don't think you can pass this barrier without answering the question..</speech>
        </speeches>
    </conversation>

    <conversation id="2" canSkip="false">
        <speeches id="1">
            <speech>I believe it's time for a puzzle?</speech>
        </speeches>
        <speeches id="2" canSkip="false">
            <speech>It slithers toward people. Then, without warning, it triggers the explosion of its own head. It’s apparently one kind of Ultra Beast.</speech>
            <speech>Which Pokemon is it?</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh my, oh my, oh my. That's absolutely, definitely not the right correct wrong answer, it's not.
            </speech>
            <speech>In others words, you have failed.</speech>
        </speeches>
        <speeches id="4">
            <speech>No, no, no, hahahahaha. That's not the wrong answer!</speech>
            <speech>Silly you, continue!</speech>
        </speeches>
        <speeches id="5">
            <speech>Silly you, continue!</speech>
        </speeches>
        <speeches id="6">
            <speech>Come back in 2 minutes.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>I am a member of the cult of shine lost in the valley of soul.</speech>
            <speech>We are a group of extraordinary individuals, who have gained the power to summon alternate-colored Pokemon.</speech>
            <speech>I believe the common description is "shiny Pokemon". More precisely, I have attained the power to summon a shiny new Poochyena.</speech>
            <speech>If you wish to see a demonstration of my power, then bring me 3 Mighteyana (at least Lv.45), and I shall do the rest.</speech>
        </speeches>
        <speeches id="2">
            <speech>I see you have arrived with 3 Mighteyana, as asked of you. Would you like to see a demonstration of my powers?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's a shame.</speech>
        </speeches>
        <speeches id="4">
            <speech>Very well. Time for me to show you my powers - *Huazaha xhakje troyes muhyean*!!</speech>
        </speeches>
        <speeches id="5">
            <speech>And there it is, a 'shiny' Poochyena! Make sure you take great care of it!</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Welcome to my Soul Shard Shop. Would you like to buy something for Soul Shards?</speech>
        </speeches>
        <speeches id="2">
            <speech>Please visit again!</speech>
        </speeches>
    </conversation>
</npcs>