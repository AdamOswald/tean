<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I’m a beginner, but I’ll do my best! I’ll give it everything I can. Watch me!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sorry if I bored you! I’ll try harder next time!</speech>
        </speeches>
        <speeches id="3">
            <speech>Sorry if I bored you! I’ll try harder next time!</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh! I forgot to finish off our battle! I still need to study more...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Don’t let your guard down, or you may be crying when a kid beats you.</speech>
        </speeches>
        <speeches id="2">
            <speech>I may be young, but that doesn’t mean I’ll lose—even to a grown-up.</speech>
        </speeches>
        <speeches id="3">
            <speech>I may be young, but that doesn’t mean I’ll lose—even to a grown-up.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sheesh! Can’t you see that I’m just a kid! It wasn’t fair of you to go all out like that!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Miniskirts are, like, unbelievable, right?</speech>
        </speeches>
        <speeches id="2">
            <speech>You’ve got to enjoy a fad while you still can, right?</speech>
        </speeches>
        <speeches id="3">
            <speech>You’ve got to enjoy a fad while you still can, right?</speech>
        </speeches>
        <speeches id="4">
            <speech>They’re easy to move in and cute. Anything but a miniskirt would be unbelievable, right?</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Glad you made it! It won’t be an easy job from here.</speech>
        </speeches>
        <speeches id="2">
            <speech>I got a little carried away earlier, but what job was I talking about?</speech>
        </speeches>
        <speeches id="3">
            <speech>I got a little carried away earlier, but what job was I talking about?</speech>
        </speeches>
        <speeches id="4">
            <speech>Haha! What’d I tell ya? You’re not ready yet.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Uhnn... What is this place? It doesn’t have the aroma of a fairy tale at all!</speech>
        </speeches>
        <speeches id="2">
            <speech>I need to get out of this place. My fairy tale is going to disappear!</speech>
        </speeches>
        <speeches id="3">
            <speech>I need to get out of this place. My fairy tale is going to disappear!</speech>
        </speeches>
        <speeches id="4">
            <speech>No, no, that won’t do, it won’t do at all. When I’m in trouble, I feel farther away from fairy
                tales.
            </speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>My last ever battle... That’s the way I’d like us to view this match...</speech>
        </speeches>
        <speeches id="2">
            <speech>It’s been fun... Let’s have another last battle again someday...</speech>
        </speeches>
        <speeches id="3">
            <speech>It’s been fun... Let’s have another last battle again someday...</speech>
        </speeches>
        <speeches id="4">
            <speech>We will meet again someday... Heh. If only that were true...</speech>
        </speeches>
    </conversation>
    <movingNpc direction="LEFT" id="1" name="Ralts" shouldSleep="" speed="1" sprite="280" type="pokemon" x="13" y="45">
        <path>LEFTx1, RIGHTx1</path>
        <onCollisionSpeech gap="4">Ra Ra</onCollisionSpeech>
        <speech>Ralts is now Tracing you!!!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Budew" shouldSleep="" speed="1" sprite="406" type="pokemon" x="12" y="49">
        <path>LEFTx1, RIGHTx1</path>
        <onCollisionSpeech gap="4">Bu! Bude! Bu!</onCollisionSpeech>
        <speech>Buuuuuuudew!!!!</speech>
    </movingNpc>
<!--
    <movingNpc direction="DOWN" id="3" name="Lotad" shouldSleep="" speed="1" sprite="270" type="pokemon" x="19" y="47">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Looootad!</onCollisionSpeech>
        <speech>*Lotad uses Water Gun*</speech>
        <speech>$PLAYER_NAME you better change your T-Shirt!!!!</speech>
    </movingNpc>
-->
    <movingNpc direction="RIGHT" id="5" name="Roselia" shouldSleep="" speed="1" sprite="315" type="pokemon" x="6"
               y="35">
        <path>RIGHTx2, LEFTx2</path>
        <onCollisionSpeech gap="4">Roselia...Roselia...!</onCollisionSpeech>
        <speech>Roseeelia!</speech>
    </movingNpc>
    <movingNpc direction="LEFT" id="6" name="Minun" shouldSleep="" speed="1" sprite="312" type="pokemon" x="21" y="9">
        <path>LEFTx1, RIGHTx1</path>
        <onCollisionSpeech gap="4">Minun!</onCollisionSpeech>
        <speech>Mi-Mi-Mi!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="7" name="Plusle" shouldSleep="" speed="1" sprite="311" type="pokemon" x="24" y="7">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Plusle!</onCollisionSpeech>
        <speech>Plusle....Plusle!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="8" name="Robby" shouldSleep="" speed="1" sprite="4" type="npc" x="12" y="17">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Yaaaay!!!</onCollisionSpeech>
        <speech>I managed to beat Roark with my Psyduck!</speech>
        <speech>If I hadn't of gotten advice from that guy named Tom I wouldn't have been able to do it though!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="9" name="Psyduck" shouldSleep="" speed="1" sprite="54" type="pokemon" x="26" y="70">
        <path>UPx3, DOWNx3</path>
        <onCollisionSpeech gap="4">Psyduck</onCollisionSpeech>
        <speech>Psyduck gives you a headache!</speech>
    </movingNpc>
    <conversation id="9">
        <speeches id="2">
            <speech>Hi! I'm a PBO Tutorial campaign clown. Let's roll out my question!</speech>
            <speech>Can you allocate EVs manually in PBO?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's not the correct answer. Let's try again.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ding-ding!</speech>
            <speech>You're absolutely correct.</speech>
            <speech>Open your Pokemon Menu, click on EV and you will find it there!</speech>
        </speeches>
        <speeches id="5">
            <speech>Here you go! Please accept this Pomeg Berry!</speech>
            <speech>It reduces a Pokemon's HP by 10 EVs!</speech>
        </speeches>
    </conversation>
</npcs>
