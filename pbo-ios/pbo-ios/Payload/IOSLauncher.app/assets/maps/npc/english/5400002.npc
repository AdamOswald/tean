<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>What are you doing in here? I locked the door!</speech>
        </speeches>
        <speeches id="2">
            <speech>This is a mistake!</speech>
        </speeches>
        <speeches id="3">
            <speech>This is a mistake!</speech>
        </speeches>
        <speeches id="4">
            <speech>Don't dare to mess with us ever again.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>Looks like Jessa forgot to lock the door. Doesn't mean you can enter and mess with us.</speech>
        </speeches>
        <speeches id="2">
            <speech>AAAAAAAAAAAAAAAAAAAAAAAAA!!!!!!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>AAAAAAAAAAAAAAAAAAAAAAAAA!!!!!!!!</speech>
        </speeches>
        <speeches id="4">
            <speech>Don't dare to mess with us ever again.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>Why are you here? You have nothing to do with our business.</speech>
            <speech>The mission we are on is way beyond your understanding.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmm.. You were tougher than I expected.</speech>
            <speech>This was not my strongest team so don't be excited.</speech>
            <speech>I am done with my business here anyway.</speech>
            <speech>One day entire Jvaloh will be under my control and kids like you will appreciate the fact that you got to battle me.</speech>
            <speech>Jessa and Zames, you both are fired!</speech>
        </speeches>
        <speeches id="4">
            <speech>You are strong I will give you that but not strong enough to defeat me.</speech>
            <speech>Don't linger around this Mansion ever again.</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>Wow, that was brave. You are just a young trainer but you possess immense strength and courage</speech>
            <speech>Theo or whosoever it was, he was talking about some Jvaloh region and how only the strongest can survive there.</speech>
            <speech>He said that the biggest grinders of the Pokémon World come there and leave it as they cannot survive.</speech>
            <speech>As a token of thanks, I would like to offer you this Pixie Plate.</speech>
        </speeches>
        <speeches id="2">
            <speech>I don't know what it does but the grunts were trying to snatch it from me before Theo asked them to stop.</speech>
            <speech>For now, I will go and rest. I hope to see you some other day.</speech>
        </speeches>
    </conversation>
</npcs>