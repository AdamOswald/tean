<npcs>
    <npc id="1000" x="25" y="52" direction="DOWN" name="Guide Hari" sprite="23">
        <speech>Greetings, challenger! $GYM8_LEADER uses Dragon-type Pokémon.</speech>
        <speech>Dragons are among the most elusive and powerful of all Pokémon.</speech>
        <speech>Nine legendary Pokémon are part Dragon type and four have legendary-like stats.</speech>
        <speech>They are notoriously difficult to train due to requiring more EXP points per level than most non-legendary Pokémon,</speech>
        <speech>and the fact they evolve much later and thus are in their weaker forms for longer</speech>
        <speech>She has got every Pokémon above level 70 which says a lot about her.</speech>
        <speech>Interestingly, many final-evolution Dragon types have a 4x weakness to the Ice type. Their attacks also don't work on Fairy-types.</speech>
        <speech>They are also weak against Dragon types.</speech>
        <speech>I would advise you to carry Fairy, Ice and Dragon types to challenge her.</speech>
        <speech>Good luck, $PLAYER_NAME! Rawrrr!</speech>
    </npc>

    <conversation id="1" canSkip="false">
        <speeches id="1">
            <speech>Are you here to challenge $GYM8_LEADER? Try me out first.</speech>
        </speeches>
        <speeches id="2">
            <speech>You did well, I will let you pass.</speech>
        </speeches>
        <speeches id="3">
            <speech>Now go, what are you waiting for?</speech>
        </speeches>
        <speeches id="4">
            <speech>Train more or else you will getting thrashed by us.</speech>
        </speeches>
    </conversation>

    <conversation id="2" canSkip="false">
        <speeches id="1">
            <speech>$GYM8_LEADER is not always in the gym. We can't let her spend her time on someone who is not worthy.</speech>
            <speech>Let me test you out.</speech>
        </speeches>
        <speeches id="2">
            <speech>Not bad. What did you have for breakfast today because it surely made you strong.</speech>
        </speeches>
        <speeches id="3">
            <speech>Go go before she leaves.</speech>
        </speeches>
        <speeches id="4">
            <speech>Train harder kid, why are you wasting everyone's time?</speech>
        </speeches>
    </conversation>

    <conversation id="3" canSkip="false">
        <speeches id="1">
            <speech>I am expert at using dragon Pokémon. Show me what you are good at.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmm, you are not 1 dimensional it seems.</speech>
        </speeches>
        <speeches id="3">
            <speech>I think I should start training other types as well.</speech>
        </speeches>
        <speeches id="4">
            <speech>Do you even Pokémon kid?</speech>
        </speeches>
    </conversation>

    <conversation id="4" canSkip="false">
        <speeches id="1">
            <speech>It's my duty to protect $GYM8_LEADER from non worthy trainers.</speech>
        </speeches>
        <speeches id="2">
            <speech>You are worthy to move forwards. Good luck.</speech>
        </speeches>
        <speeches id="3">
            <speech>Good luck.</speech>
        </speeches>
        <speeches id="4">
            <speech>No, don't enter this gym before you are strong enough to defeat me.</speech>
        </speeches>
    </conversation>

    <conversation id="5" canSkip="false">
        <speeches id="1">
            <speech>Battle me, I want to impress $GYM8_LEADER. I want to become like her someday.</speech>
        </speeches>
        <speeches id="2">
            <speech>How.. How did I lose to you?</speech>
        </speeches>
        <speeches id="3">
            <speech>How.. How did I lose to you?</speech>
        </speeches>
        <speeches id="4">
            <speech>Defeating someone like you won't take me too far. I need someone stronger to battle.</speech>
        </speeches>
    </conversation>

    <conversation id="6" canSkip="false">
        <speeches id="1">
            <speech>Let's have a quick battle to figure out your power level.</speech>
        </speeches>
        <speeches id="2">
            <speech>Its above nine thousand!!!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>Its above nine thousand!!!!!</speech>
        </speeches>
        <speeches id="4">
            <speech>You are not worthy enough to be a trainer. Where is your trainer's pride?</speech>
        </speeches>
    </conversation>

    <conversation id="7" canSkip="false">
        <speeches id="1">
            <speech>It takes time getting used to the gym path and takes longer to defeat me and pass.</speech>
        </speeches>
        <speeches id="2">
            <speech>That didn't take long. I am impressed.</speech>
        </speeches>
        <speeches id="3">
            <speech>I am impressed. Good luck.</speech>
        </speeches>
        <speeches id="4">
            <speech>Defeating you was a cakewalk. How did you manage to defeat General Thanda?</speech>
        </speeches>
    </conversation>

    <conversation id="8" canSkip="false">
        <speeches id="1">
            <speech>You have done well to get this far but there is not going further.</speech>
        </speeches>
        <speeches id="2">
            <speech>haha I was just joking. Go on.</speech>
        </speeches>
        <speeches id="3">
            <speech>haha I was just joking. Go on.</speech>
        </speeches>
        <speeches id="4">
            <speech>Told ya kid, there is no going further. $GYM8_LEADER doesn't battle weaklings.</speech>
        </speeches>
    </conversation>

    <conversation id="9" canSkip="false">
        <speeches id="1">
            <speech>So you are the one who managed to defeat all my friends in Gym 7? I will not go easy on you.</speech>
        </speeches>
        <speeches id="2">
            <speech>I can clearly see your potential. I am not surprised that they all got defeated by you.</speech>
        </speeches>
        <speeches id="3">
            <speech>I can clearly see your potential. I am not surprised that they all got defeated by you.</speech>
        </speeches>
        <speeches id="4">
            <speech>They all will feel happy when I will them that I defeated you..</speech>
        </speeches>
    </conversation>

    <conversation id="10" canSkip="false">
        <speeches id="1">
            <speech>I am surprised to see someone of your age has defeated experienced tamers.</speech>
            <speech>Time for you to battle the most experienced one.</speech>
        </speeches>
        <speeches id="2">
            <speech>Which school did you learn all this from? I need to go back to school.</speech>
        </speeches>
        <speeches id="3">
            <speech>Which school did you learn all this from? I need to go back to school.</speech>
        </speeches>
        <speeches id="4">
            <speech>Told you that I am the most experienced here. Don't worry, you will be able to defeat me once you are 50+ old.</speech>
        </speeches>
    </conversation>

    <conversation id="11" canSkip="false">
        <speeches id="1">
            <speech>Just another day at work and probably another weakling to battle.</speech>
        </speeches>
        <speeches id="2">
            <speech>Wow, its hard to get battle as intense as this one. Well played kid.</speech>
        </speeches>
        <speeches id="3">
            <speech>Wow, its hard to get battle as intense as this one. Well played kid. Good luck.</speech>
        </speeches>
        <speeches id="4">
            <speech>Meh...</speech>
        </speeches>
    </conversation>

    <conversation id="12" canSkip="false">
        <speeches id="1">
            <speech>Finally a trainer to battle with. I was falling asleep.</speech>
        </speeches>
        <speeches id="2">
            <speech>Time to go and train as I feel ashamed to be standing here.</speech>
        </speeches>
        <speeches id="3">
            <speech>One day I will become the best trainer in this gym and that day I will defeat you.</speech>
        </speeches>
        <speeches id="4">
            <speech>I just wasted 1 minute of my precious life. Screw you!!</speech>
        </speeches>
    </conversation>

    <conversation id="13" canSkip="false">
        <speeches id="1">
            <speech>You are an amazing human being. Thanks for getting me the sacred elixir.</speech>
            <speech>People today are selfish, driven by agenda. You, you are a gem!</speech>
            <speech>I believe that very quality makes you strong. Your Pokémon absorbs that from you and get stronger.</speech>
            <speech>Having said that, to defeat me you will need much more than that. You will need luck because I am not going down easy.</speech>
            <speech>Let's find it out now.</speech>
        </speeches>
        <speeches id="2">
            <speech>*Loud applause around*</speech>
            <speech>Splendid $PLAYER_NAME. Splendid. I have never battled someone like you before.</speech>
            <speech>I really underestimated you. I feel you are far beyond my league. Every move you made said something about you.</speech>
            <speech>I heard from General Thanda that you are special, and I think I have been lucky to battle someone like you.</speech>
            <speech>Here keep the Draco Badge and TM Dragon Claw.</speech>
            <speech>This badge is the proof of your hard work and bond.</speech>
            <speech>You have come far but there is a lot more to do still.</speech>
            <speech>I wish you luck for your battle against Elite 4. I won't be surprised if you defeat them.</speech>
        </speeches>
        <speeches id="3">
            <speech>You have come far but there is a lot more to do still.</speech>
            <speech>I wish you luck for your battle against Elite 4. I won't be surprised if you defeat them.</speech>
        </speeches>
        <speeches id="4">
            <speech>You did well. You really did well.</speech>
            <speech>I could see the bond between you and your Pokémon. It felt like you have been doing this since you were born.</speech>
            <speech>Although you need more experience to defeat me. Train and come back later.</speech>
        </speeches>
    </conversation>
</npcs>