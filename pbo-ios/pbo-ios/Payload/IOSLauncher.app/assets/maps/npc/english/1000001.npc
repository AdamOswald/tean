<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>*Lapras wants to carry you somewhere*</speech>
            <speech>Do you want to travel with the Lapras?</speech>
        </speeches>
        <speeches id="2">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>I cannot leave this cute little Happiny in a sad mood. I should get it 35 Egg Shards.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Happi Happiny.. Pinni :(</speech>
        </speeches>
        <speeches id="2">
            <speech>*Would you like to give 35 Egg Shards to Happiny?*</speech>
        </speeches>
        <speeches id="3">
            <speech>Happiny looks really sad.</speech>
        </speeches>
        <speeches id="4">
            <speech>Happiny is smiling now. I can leave this map now!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>This boulder seems to radiate a strange, rejuvenating aura. Would you like to rejuvenate your Pokémon, too?</speech>
        </speeches>
        <speeches id="2">
            <speech>It seems to have worked.</speech>
        </speeches>
        <speeches id="3">
            <speech>*You chose to avoid exposing your Pokémon to this strange boulder*</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Hello. I can exchange your Primarina Costume Bundle Pass for a Male Primarina Costume Bundle.</speech>
            <speech>Come back to me if you want to do an exchange.</speech>
        </speeches>
        <speeches id="2">
            <speech>Would you live to give me your Primarina Costume Bundle Pass for a Male Primarina Costume Bundle?</speech>
        </speeches>
        <speeches id="3">
            <speech>No problems, come back later if you change your mind.</speech>
        </speeches>
        <speeches id="4">
            <speech>Here you go!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Hello. I can exchange your Primarina Costume Bundle Pass for a Female Primarina Costume Bundle.</speech>
            <speech>Come back to me if you want to do an exchange.</speech>
        </speeches>
        <speeches id="2">
            <speech>Would you live to give me your Primarina Costume Bundle Pass for a Female Primarina Costume Bundle?</speech>
        </speeches>
        <speeches id="3">
            <speech>No problems, come back later if you change your mind.</speech>
        </speeches>
        <speeches id="4">
            <speech>Here you go!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>

    <conversation id="8">
        <speeches id="1">
            <speech>Hello. Welcome to the Easter Islands.</speech>
            <speech>Easter Islands are opened every year on the occassion of Easter.... {EVENT=mood-7-15-20}</speech>
            <speech>To thank you for coming to the islands, I would like to hand you a free Togepi Mood Pack.</speech>
        </speeches>
        <speeches id="2">
            <speech>There are a lot of things to do on the easter islands.</speech>
            <speech>You can get new items, find rare Pokémon and get new costumes.</speech>
            <speech>Hope you enjoy your stay here.</speech>
        </speeches>
    </conversation>

    <npc direction="DOWN" hidden="false" id="1" name="Victoria" randomRotation="true" sprite="6" x="28" y="5">
        <speech>Do you know these islands were closed for 2 years for maintenance?</speech>
        <speech>Nothing much has changed in here though, I wonder what was the maintenance for.</speech>
    </npc>
</npcs>
