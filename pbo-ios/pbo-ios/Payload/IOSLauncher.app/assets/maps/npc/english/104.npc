<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>So what are you waiting for? Use the incubator above to select your companion.</speech>
            <speech>Do remember that once you make a choice, you cannot undo it.</speech>
        </speeches>
        <speeches id="2">
            <speech>Aww look at its eyes. Take care of this little creature.</speech>
            <speech>If you see $JVALOH_RIVAL around, say hi. She is my niece. She is also helping me in completing the Pokédex.</speech>
            <speech>A final favour - Take care of her, she can be very brave sometimes which is not always a good thing.</speech>
            <speech>Oh, don't forget to give Mai a Visit. She might have something for you ;)</speech>
        </speeches>
    </conversation>

    <conversation id="4">
        <speeches id="1">
            <speech>That was wild. Yep, what happened over the course of few weeks has been pretty wild.</speech>
            <speech>I had no idea there was so much going on under my nose.</speech>
            <speech>These priests, your brother, dead wife, Rayquaza, Ho-Oh and the 3 dogs.</speech>
            <speech>That's a lot of information even for me to process, I don't know how you managed to handle all of that alone.</speech>
            <speech>You are one special kid, now I understand why Rowan spoke so highly of you.</speech>
            <speech>Anyway, the reason I called you here is that I have some information which you might like.</speech>
            <speech>Apparently, there are 3 very ancient priests who are able to summon the legendary dogs at their will.</speech>
            <speech>I have heard that they can channel their energy and speak with the legendary dogs through telepathy.</speech>
            <speech>No, I don't know where they are. That is something which you have to find yourself.</speech>
            <speech>My recommendation to you is to go and speak with them.</speech>
            <speech>I am pretty sure they will be happy to see you and who knows what they might have to offer you.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh you want me to repeat?</speech>
            <speech>Apparently, there are 3 very ancient priests who are able to summon the legendary dogs at their will.</speech>
            <speech>I have heard that they can channel their energy and speak with the legendary dogs through telepathy.</speech>
            <speech>No, I don't know where they are. That is something which you have to find yourself.</speech>
            <speech>My recommendation to you is to go and speak with them.</speech>
            <speech>I am pretty sure they will be happy to see you and who knows what they might have to offer you.</speech>
            <speech>Good luck!</speech>
        </speeches>
    </conversation>
</npcs>
