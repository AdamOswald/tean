<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Oh, I see. Would you like to be cut to pieces? Or do you prefer the role of punching bag?</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmmm... If I was going to lose anyway, I was hoping to get totally messed up in the process.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmmm... If I was going to lose anyway, I was hoping to get totally messed up in the process.</speech>
        </speeches>
        <speeches id="4">
            <speech>You didn't decide quickly enough, so you got a little from column A and a little from column B.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>This isn't a uniform it's just what I like to wear. I made it myself.</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa, that was a close one. I almost got my clothes dirty.</speech>
        </speeches>
        <speeches id="3">
            <speech>Whoa, that was a close one. I almost got my clothes dirty.</speech>
        </speeches>
        <speeches id="4">
            <speech>I wish I could live in the worlds that I see in games, anime, and comics.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>I'm Callisto, the boss of the Kalos Coalition. It'd be my pleasure to take you on in battle!</speech>
        </speeches>
        <speeches id="2">
            <speech>Well, ain't you something... All right, then. I'm stepping down you're the new boss!</speech>
        </speeches>
        <speeches id="3">
            <speech>Well, ain't you something... All right, then. I'm stepping down you're the new boss!</speech>
        </speeches>
        <speeches id="4">
            <speech>Phew... You've got some good Pokémon on your side, all right.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Halt, fool! I am the guardian of this castle's gardens! A ninja of nature!</speech>
        </speeches>
        <speeches id="2">
            <speech>The fruits of my victory... have already been harvested...</speech>
        </speeches>
        <speeches id="3">
            <speech>The fruits of my victory... have already been harvested...</speech>
        </speeches>
        <speeches id="4">
            <speech>Gasp! What maliciousness was in that move?! I see. So you must also be a ninja...</speech>
        </speeches>
    </conversation>
</npcs>
