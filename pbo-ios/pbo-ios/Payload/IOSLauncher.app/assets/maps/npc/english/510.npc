<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>That sparkling new Pokètch! Your awkwardness as a traveller.</speech>
            <speech>Hmmm... You're still a pretty new Trainer, aren't you?</speech>
            <speech>But it's all good! You are new fellow friend of Pokèmon.</speech>
            <speech>So let me make a gift of Hidden Machine to you.</speech>
        </speeches>
        <speeches id="2">
            <speech>That Hidden Machine, or HM for short, contains the hidden move Rock Smash.</speech>
            <speech>A Pokèmon learning Rock Smash can smash small boulders in front.</speech>
            <speech>But the trainer has to have a Gym Badge from Oreburg City!</speech>
            <speech>If you don't have the badge, you can't make Pokèmon use the hidden move Rock Smash outside of battle.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>My dad catches Pokémon for me. I don’t know how strong they are, though.</speech>
        </speeches>
        <speeches id="2">
            <speech>My Pokémon and I are weak... Stupid Dad!</speech>
        </speeches>
        <speeches id="3">
            <speech>My Pokémon and I are weak... Stupid Dad!</speech>
        </speeches>
        <speeches id="4">
            <speech>My Pokémon and I ARE strong! Thank you, Dad!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>My big brother who never comes out of his room told me to come check this place out for him.</speech>
        </speeches>
        <speeches id="2">
            <speech>I’ll let my big brother know that this is a scary place.</speech>
        </speeches>
        <speeches id="3">
            <speech>I’ll let my big brother know that this is a scary place.</speech>
        </speeches>
        <speeches id="4">
            <speech>I’ll let my big brother know that this is a fun place.</speech>
        </speeches>
    </conversation>
    <movingNpc direction="UP" id="1" name="Diglett" shouldSleep="" speed="1" sprite="50" type="pokemon" x="44" y="22">
        <path>UPx1, DOWNx1</path>
        <onCollisionSpeech gap="4">Diglett!</onCollisionSpeech>
        <speech>Diglett...Dig...Diglett...Dig</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="2" name="Dugtrio" shouldSleep="" speed="1" sprite="51" type="pokemon" x="17" y="16">
        <path>DOWNx1, UPx1</path>
        <onCollisionSpeech gap="4">Trio!</onCollisionSpeech>
        <speech>Trio Trio Trio!</speech>
    </movingNpc>
</npcs>
