<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I am Psychic Primarina. I come from Nuzbar Village.</speech>
            <speech>I bring a special drug from Nuzbar which can make you see Pokémon which you won't see usually.</speech>
            <speech>In exchange for that, I will need 50 Egg Shards. Come back to me if you want to unlock this special ability.</speech>
        </speeches>
        <speeches id="2">
            <speech>I bring a special drug from Nuzbar which can make you see Pokémon which you won't see usually.</speech>
            <speech>Do you want to give me 50 egg shards to unlock this special ability?</speech>
        </speeches>
        <speeches id="3">
            <speech>No problems, come back later if you change your mind.</speech>
        </speeches>
        <speeches id="4">
            <speech>*The Psychich Primarina feeds you some drugs and disappears.*</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npcs>