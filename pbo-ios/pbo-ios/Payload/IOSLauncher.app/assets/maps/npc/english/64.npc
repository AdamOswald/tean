<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>You come bearing the dark seal; I'm sure you know a great deal~</speech>
            <speech>Within the great cult exist the three elements - the flames; the seas and the woods</speech>
            <speech>Each with their own beliefs; each with their own goods~</speech>
        </speeches>
        <speeches id="2">
            <speech>You come bearing the dark seal; I'm sure you know a great deal~</speech>
            <speech>Within the great cult exist the three elements - the flames; the seas and the woods</speech>
            <speech>Each with their own beliefs; each with their own goods~</speech>
            <speech>What say you, o' youngling? Do you vow to respect the seas?</speech>
        </speeches>
        <speeches id="3">
            <speech>A foolish choice it is; a big mistake it is~</speech>
        </speeches>
        <speeches id="4">
            <speech>You have chosen well, o' youngling. Seek the dark oceanic tides in the place where it all began, and
                there you shall see the path that lies ahead~
            </speech>
        </speeches>
        <speeches id="5">
            <speech>Farewell ... for now</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Vespi ... VESPI!!</speech>
        </speeches>
        <speeches id="2">
            <speech>*Would you like to give the Pamtre Berry to Vespiquen?*</speech>
        </speeches>
        <speeches id="3">
            <speech>Vespiquen still looks angry.</speech>
        </speeches>
        <speeches id="4">
            <speech>Vespiquen appears to have calmed down.</speech>
        </speeches>
        <speeches id="5">
            <speech>Quen ...</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Vespiquen looks furious. It would be a bad idea to go there right now.</speech>
            <speech>Maybe there is some herbal medicine or berry that could make it happy? But even so, where would I be
                able to find something like that ...
            </speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Vespi ... VESPI!!</speech>
            <speech>**Vespiquen looks furious. It would be a bad idea to go there right now.**</speech>
            <speech>**I should look for Pamtre Berry to calm it down.</speech>
            <speech>**I should look in Nuzbar Village like Nushkie told me.**</speech>
        </speeches>
    </conversation>

    <npc direction="DOWN" id="1020" name="Fisherman Samba" sprite="16" x="32" y="11">
        <speech>I come here to fish everyday.</speech>
        <speech>The forest has some kind of calm about it..</speech>
        <speech>Although its not that calm when these Vespiqueens get upset.</speech>
    </npc>
    <npc direction="RIGHT" id="1021" name="Honey Gatherer Shehad" sprite="24" x="29" y="25">
        <speech>Aeee, get out of my way....</speech>
        <speech>Can't you see I am trying to gather some honey here?</speech>
    </npc>
    <npc direction="DOWN" id="1022" name="Wise Man Chahal" sprite="23" x="18" y="19">
        <speech>This tree you are standing below is around 1000 years old.</speech>
        <speech>Not many of these are left in $REGION_NAME.</speech>
        <speech>$REGION_NAME was once covered with these but an angry Ho-Oh burnt many of these to ashes.</speech>
    </npc>
    <npc direction="RIGHT" id="1024" name="Laon" randomRotation="true" sprite="101" x="2" y="20">
        <speech>I am trying to move these boulders to get to the other side of this forest.</speech>
        <speech>$REGION_NAME is full of mysteries.. who knows what lies next?</speech>
    </npc>
    <npc direction="RIGHT" id="1025" name="Adventurer Shami" randomRotation="true" sprite="20" x="16" y="10">
        <speech>Move back...</speech>
        <speech>Don't stand here. You might fall off the cliff.</speech>
    </npc>
    <npc direction="DOWN" id="1026" name="Explorer Ramu" sprite="10" x="8" y="7">
        <speech>Are you planning to enter this forest $PLAYER_NAME?</speech>
        <speech>Not many dare to enter the forest..</speech>
        <speech>Its said that many who enter the forest either get lost or get injured by wild bugs..</speech>
        <speech>Although the ones who return safe bring back Pokémon not seen often in $REGION_NAME.</speech>
    </npc>
</npcs>
