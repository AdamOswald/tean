<npc>
    <conversation id="1" canSkip="false">
        <speeches id="1">
            <speech>Is it normal to be attracted towards dragons?</speech>
        </speeches>
        <speeches id="2">
            <speech>Yeah I think I need to pay more attention to humans.</speech>
        </speeches>
        <speeches id="3">
            <speech>Yeah I think I need to pay more attention to humans.</speech>
        </speeches>
        <speeches id="4">
            <speech>Dragons are mine not yours.</speech>
        </speeches>
        <speeches id="5">
            <speech></speech>
        </speeches>
    </conversation>

    <conversation id="2" canSkip="false">
        <speeches id="1">
            <speech>What do you think of Tyrogue and it's evolutions? Wanna find out?</speech>
        </speeches>
        <speeches id="2">
            <speech>They are not that bad, its just that I don't want to be a Sutta gang member. I am forced to battle with these pokemons.</speech>
        </speeches>
        <speeches id="3">
            <speech>They are not that bad, its just that I don't want to be a Sutta gang member. I am forced to battle with these pokemons.</speech>
        </speeches>
        <speeches id="4">
            <speech>They are strong, unlike you. Go and train.</speech>
        </speeches>
        <speeches id="5">
            <speech></speech>
        </speeches>
    </conversation>

    <conversation id="3" canSkip="false">
        <speeches id="1">
            <speech>I love going to Safari zone and catch quality cattle. Do you want to battle them.</speech>
        </speeches>
        <speeches id="2">
            <speech>They are not meant to be trained, cattle are made only for milk.</speech>
        </speeches>
        <speeches id="3">
            <speech>They are not meant to be trained, cattle are made only for milk.</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh my god, they are so awesome.</speech>
        </speeches>
        <speeches id="5">
            <speech></speech>
        </speeches>
    </conversation>

    <conversation id="4" canSkip="false">
        <speeches id="1">
            <speech>I aim to build the best water type team one day. Let me try and test my current team against you intruder.</speech>
        </speeches>
        <speeches id="2">
            <speech>I am still young and there is a long way to go for me. I might quit Sutta Gang as I don't see them helping me with getting strong.</speech>
        </speeches>
        <speeches id="3">
            <speech>I am still young and there is a long way to go for me. I might quit Sutta Gang as I don't see them helping me with getting strong.</speech>
        </speeches>
        <speeches id="4">
            <speech>I think I am good enough now to lead Sutta Gang. Don't you reckon idiot?</speech>
        </speeches>
        <speeches id="5">
            <speech></speech>
        </speeches>
    </conversation>
</npc>