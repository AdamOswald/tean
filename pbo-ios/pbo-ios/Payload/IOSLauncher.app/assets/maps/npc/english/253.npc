<npcs>
    <npc id="1" x="19" y="11" direction="RIGHT" name="Scientist Janna" sprite="7">
        <speech>Generator's working properly. Nothing special here.</speech>
        <speech>Listen youngster, sometimes consistency is the best thing. Let no one tell you otherwise.</speech>
    </npc>
    <npc id="2" x="6" y="25" direction="RIGHT" name="Scientist Marion" sprite="7">
        <speech>I enjoy working here, in the company of all these machines.</speech>
        <speech>They're much better than people sometimes, at least that's how I feel.</speech>
        <speech>I mean ... they don't want to actively harm you, unlike some people.</speech>
        <speech>Oh well, let bygones be bygones ...</speech>
    </npc>
    <npc id="3" x="17" y="35" direction="DOWN" name="Scientist Rick" sprite="8">
        <speech>Don't touch anything without asking kid, it's dangerous.</speech>
        <speech>I mean, we have some incredibly powerful machines here, but that also enhances the risk.</speech>
        <speech>I've got nothing against you, but ever since that incident, it's hard to trust people.</speech>
        <speech>What happened, you ask? I'm not sure even I understand all of it, to be honest.</speech>
    </npc>
    <npc id="4" x="9" y="39" direction="RIGHT" name="Scientist Morty" sprite="8">
        <speech>Don't mind Rick, he's just been iffy ever since those people came here that day.</speech>
        <speech>What people? Well, they were an odd bunch, wearing orange/white and demanding that we show them "the room".</speech>
        <speech>Although we protested that we knew nothing about this, they didn't budge. Not for a few hours, anyway.</speech>
        <speech>Once they realised we had no information, they finally left, but not without causing a lot of damage.</speech>
        <speech>What struck me as the most surprising thing, though, was that the Police Officer who came here didn't seem concerned at all ...</speech>
    </npc>
    <npc id="5" x="28" y="34" triggerX="29" triggerY="34" direction="UP" name="Scientist Jun" sprite="8">
        <speech>My parents used to tell me stories of the old Power Plant, and how it was lost.</speech>
        <speech>Oh, you want to hear it too?</speech>
        <speech>Well, what happened was that one day a huge earthquake hit this part of the region. As a result, there
            was a massive fissure in the ground.
        </speech>
        <speech>Apparently, it is said to have swallowed the entire Power Plant, along with the surrounding area.
        </speech>
        <speech>Thankfully, no one was inside it on that day, it being a holiday and all.</speech>
        <speech>Even though, I do wonder what actually happened to it after that ...</speech>
    </npc>
    <conversation id="1">
        <speeches id="1">
            <speech>Uh, hi there, I guess?</speech>
            <speech>Would you happen to have any 'Yellow Shards' with you? I'm looking for a tiny one, around an inch big.</speech>
            <speech>Let's just say I need one for, uhh, "research purposes".</speech>
            <speech>If you can get me one, I could reward you handomely. Is there anything you want, in particular?</speech>
            <speech>A 'Power Plant Pass'? That's an odd request, but I think I can procure one, if you could get me that Yellow Shard.</speech>
        </speeches>
        <speeches id="2">
            <speech>Fantastic! You want to give me that Yellow Shard in exchange for a pass?</speech>
        </speeches>
        <speeches id="3">
            <speech>But I need that Yellow Shard ...</speech>
        </speeches>
        <speeches id="4">
            <speech>There you go, an authentic Power Plant Pass. I actually found it lying on the floor sometime back.</speech>
            <speech>Anyway, thanks.</speech>
        </speeches>
        <speeches id="5">
            <speech>If anyone asks, you don't know me, and I don't know you.</speech>
        </speeches>
    </conversation>

    <conversation id="2">
        <speeches id="1">
            <speech>You little Brats, stop meddling with our plans!!</speech>
        </speeches>
        <speeches id="2">
            <speech>You imbecile human!!</speech>
            <speech>Do you even know what are you up against?</speech>
            <speech>Our job here is done, but I will make sure my master knows about you.</speech>
            <speech>Step away!</speech>
        </speeches>
        <speeches id="4">
            <speech>Don't dare to come back here and meddle with us.</speech>
            <speech>What we are going to achieve is way beyond your simpleton brains.</speech>
        </speeches>
    </conversation>

    <conversation id="3">
        <speeches id="1">
            <speech>**$JVALOH_RIVAL starts crying...**</speech>
            <speech>I am sorry $PLAYER_NAME... I should not have been this impatient.</speech>
            <speech>Thanks for saving me.</speech>
            <speech>I heard one of the grunt saying something about this being the wrong Powerplant.</speech>
            <speech>They were also describing how they will cause a lot of damage to Jvaloh's peaceful state by continuing their master's evil plan.</speech>
            <speech>I have a feeling that these Powerplants, Suicune, Electric Legendary Dogs are all linked in some way.</speech>
            <speech>We have to figure out a plan and stop them before its too late.</speech>
            <speech>Lets devise a plan and strike them! I will leave for gym 3 now and think about a plan.</speech>
        </speeches>
    </conversation>
</npcs>
