
<npcs>
    <conversation id="3">
        <speeches id="1">
            <speech>Hey, kid. I'm the local expert on fishing rods. I heard fishing rods are being given away in Jubilife City.</speech>
        </speeches>
        <speeches id="2">
            <speech>Hey, there. I'm the local expert on fishing rods. I can fix up your fishing rod if you'd like? For a fee, of course.</speech>
            <speech>Would you like to repair your rod for 500 F?</speech>
        </speeches>
        <speeches id="3">
            <speech>Congratulations, your fishing rod was successfully repaired!</speech>
        </speeches>
        <speeches id="4">
            <speech>Come back if you need your rod repaired.</speech>
        </speeches>
        <speeches id="5">
            <speech>Your rod is in perfect shape already! Come back when it needs fixing.</speech>
        </speeches>
        <speeches id="6">
            <speech>Oops, you don't have enough F to repair your rod.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech>Hold it! Don't go off without me!</speech>
            <speech>You're challenging the Pokémon League, aren't you?</speech>
            <speech>That's why I'm here, too. Let's see who's more worthy of making the challenge with a battle!</speech>
        </speeches>
        <speeches id="2">
            <speech>What just went down?! My team still needs raising?!</speech>
            <speech>I guess I'm not ready for the Pokémon League if I'm losing to you!</speech>
            <speech>Darn it! You watch, though! I'll get tougher and win my way through the Pokémon League!</speech>
            <speech>Because I'm going to become the Champion, the toughest Trainer! $PLAYER_NAME!</speech>
            <speech>You'd better not lose to anyone before me!</speech>
        </speeches>
        <speeches id="3"/>
        <speeches id="4">
            <speech>Don't lose your hopes. You weren't that bad. I am just too good.</speech>
        </speeches>
        <speeches id="5"/>
    </conversation>
    <npc direction="DOWN" hidden="false" id="1" name="Trainer Yuuki" randomRotation="false" sprite="34" x="11" y="17">
        <speech>I've spent over many hours training my Pokémon for this. But I just can't beat them...</speech>
        <speech>If only I had EV trained them.</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="2" name="Trainer Amy" randomRotation="false" sprite="33" x="38" y="5">
        <speech>I beat them guys so easily. What about you?</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="3" name="Trainer Dan" randomRotation="false" sprite="32" x="34" y="5">
        <speech>I've tried 3 times to beat them guys, I can't do it. Amy can you lend me your Pokémon PLEASE!!!</speech>
    </npc>
    <movingNpc direction="DOWN" id="4" name="Trainer Liam" speed="1" sprite="37" type="npc" x="29" y="22">
        <path>LEFTx4, RIGHTx4</path>
        <onCollisionSpeech gap="4">Oh Yeah!</onCollisionSpeech>
        <speech>I hear this isnt the end of our journey! Jvaloh is an even bigger region than Sinnoh! I can't wait to go train there!</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="5" name="Eevee" shouldSleep="" speed="1" sprite="133" type="pokemon" x="38" y="7">
        <path>RIGHTx2, LEFTx2</path>
        <onCollisionSpeech gap="4">EEEEVEEE!</onCollisionSpeech>
        <speech>*Eevee is lvl 100*</speech>
    </movingNpc>
    <movingNpc direction="DOWN" id="6" name="Riolu" shouldSleep="" speed="1" sprite="447" type="pokemon" x="32" y="6">
        <path>UPx1,DOWNx1</path>
        <onCollisionSpeech gap="4">Riolu!!</onCollisionSpeech>
        <speech>*Riolu is lvl 37*</speech>
    </movingNpc>
    <npc direction="DOWN" hidden="false" id="7" name="Grunt" randomRotation="true" sprite="209" x="10" y="3">
        <speech>Our plans might have failed but im sure we can steal some Pokémon from these Trainers!</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="8" name="James" randomRotation="false" sprite="2" x="35" y="21">
        <speech>Lets wait for $PLAYER_NAME to win, Then we can ask for their autograph!</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="9" name="Jesse" randomRotation="false" sprite="41" x="39" y="21">
        <speech>Don't be silly James, we will wait for $PLAYER_NAME to lose and steal their Pokémon while they are feeling down!</speech>
    </npc>
    <movingNpc direction="DOWN" id="10" name="Doduo" shouldSleep="false" speed="1" sprite="84" type="pokemon" x="12" y="19">
        <path>LEFTx2, RIGHTx2</path>
        <onCollisionSpeech gap="4">Doduo</onCollisionSpeech>
        <speech>*Doduo seems pumped*</speech>
    </movingNpc>

    <conversation id="8">
        <speeches id="1">
            <speech>$PLAYER_NAME !</speech>
        </speeches>
        <speeches id="2">
            <speech>Congratulations! You have come so far...</speech>
            <speech>I am not surprised though. I knew it from day 1 that you are special.</speech>
            <speech>I just wanted to congratulate and thank you for everything you have done so far.</speech>
            <speech>If you need me for anything, remember I am always in Sandgem.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh and barry has been waiting for you outside.</speech>
            <speech>He seems to be excited about something. Meet him before you leave this place.</speech>
        </speeches>
    </conversation>
</npcs>
