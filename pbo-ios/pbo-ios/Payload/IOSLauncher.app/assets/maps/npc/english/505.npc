<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Oh! There you are!</speech>
            <speech>Please, come with me! The professor is waiting!</speech>
            <speech>Our Pokémon Research Lab! Let's go...</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech>Thud!! What the... Oh, it's you, $PLAYER_NAME!</speech>
            <speech>That old guy... He's not scary so much as he is totally out there!</speech>
            <speech>Aww, it doesn't matter, $PLAYER_NAME. I'm out of here.</speech>
            <speech>See you later!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>I should check out the PokèCenter before I leave the town.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I should visit Professor Rowan's Lab before it's too late.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>I should check out the PokèMart before I leave the town.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="6">
        <speeches id="1">
            <speech>This building with the red roof is the Pokémon Center.</speech>
            <speech>It's the place that heals Pokémon that have been hurt in battle.</speech>
            <speech>You can find a Pokémon Center in most towns.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="7">
        <speeches id="1">
            <speech>The building with the blue roof over here is the Poké Mart.</speech>
            <speech>It's a shop where you can buy and sell items and medicine.</speech>
            <speech>$PLAYER_NAME, since you're a novice Trainer, you won't be able to buy many kinds of merchandise.</speech>
            <speech>Don't let it bother you!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I think I should let my family know that I am going to be helping Prof. Rowan with the Pokédex.</speech>
            <speech>I may need to go far away, so I should let someone know.</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>You currently do not have a Safari Ticket in progress.</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME !.</speech>
            <speech>Yes, Buck told me that you some data on Heatran. Let me transfer it over to My Poketch.</speech>
            <speech>...</speech>
            <speech>All right, all set!</speech>
            <speech>Now I want you to check something...</speech>
            <speech>The locals are saying that they have seen a legendary Pokémon south at the beach.</speech>
            <speech>I think you should go and have a look as you have become really strong now, and you should be able to take care of yourself if something goes wrong.</speech>
        </speeches>
    </conversation>

    <conversation id="13">
        <speeches id="1">
            <speech>My sweet child! Look at how strong you are now. I am so proud of you!</speech>
            <speech>Why am I here? Oh yeah</speech>
            <speech>Professor Rowan asked me to speak to you regarding the Legendary Pokémon you saw down the beach.</speech>
            <speech>The locals told him that it was a Suicune. Professor Rowan doesn't know much about it, but he is aware it came from Jvaloh.</speech>
            <speech>He is researching things in the lab about the Jvaloh region and what just happened.</speech>
            <speech>He also asked me to share something with you and asked you to follow Suicune’s tracks.</speech>
            <speech>He told me that your Jvaloh journey may take a while, so I should bid you a goodbye.</speech>
            <speech>He also asked you to speak to Professor Blaze in relation to Suicune once you arrive in New Dawn Town.</speech>
            <speech>My sister Mai also lives in New Dawn Town, don't foget to say hi to her. I have told her that you are on your way there.</speech>
        </speeches>
        <speeches id="2">
            <speech>But before you leave, I want you to have this Amulet as a good luck charm.</speech>
            <speech>Keep it with you, it's all my blessings locked in that amulet.</speech>
        </speeches>
        <speeches id="3">
            <speech>I wish you good luck kiddo.</speech>
            <speech>Bye bye, and don’t forget to wash your underwear...</speech>
        </speeches>
    </conversation>

    <conversation id="14">
        <speeches id="1">
            <speech>Hey $PLAYER_NAME, another thing.</speech>
            <speech>I think you should let your family know that you are going to be helping Prof. Rowan with the Pokédex.</speech>
            <speech>You may need to go far away, so you should let someone know.</speech>
        </speeches>
    </conversation>

    <conversation id="15">
        <speeches id="1">
            <speech>Oi kid, I am a wizard from the Spirit World.</speech>
            <speech>There has been a problem in the spirit world, and it can use some help.</speech>
            <speech>Do you want to travel there to help?</speech>
        </speeches>
    </conversation>

    <npc direction="DOWN" id="1" name="Diane" sprite="171" x="23" y="16">
        <speech>Remember to keep an eye on the time!</speech>
        <speech>It wouldn't do to overtax yourself...</speech>
        <speech>Now I'm going to take a break.</speech>
    </npc>
    <npc direction="LEFT" id="2" name="Rick" sprite="4" x="26" y="22">
        <speech>Oh, wow!</speech>
        <speech>Pokemon are so cool!</speech>
        <speech>You can make yours battle and make them stronger!</speech>
        <speech>I wish I had some!</speech>
        <speech>It's so cool!</speech>
    </npc>
    <npc direction="LEFT" id="3" name="Jake" sprite="39" x="8" y="18">
        <speech>Hey watch out who you trade! There are some bad guys trying to sell some bad Pokémon for a lot of money!</speech>
    </npc>
    <movingNpc direction="RIGHT" id="4" name="Youngster Melvin" shouldSleep="" speed="1" sprite="4" x="15" y="10">
        <speech>I am busy counting these ants...</speech>
        <speech>1 million 1, 1 million 2....</speech>
        <onCollisionSpeech gap="3">Please don't block me, I will lose my count..</onCollisionSpeech>
        <path>RIGHTx4, LEFTx4</path>
    </movingNpc>
    <npc direction="LEFT" hidden="false" id="5" name="Eric" sprite="48" x="29" y="11">
        <speech>Oh, did you talk to that kid Melvin?</speech>
        <speech>Yeah, he passes his whole day counting ants.</speech>
        <speech>Pretty weird...</speech>
    </npc>
    <npc direction="UP" hidden="false" id="6" name="Christina" sprite="55" x="3" y="13">
        <speech>Hello, you look new here. What's your name?</speech>
        <speech>Ah.. Hello $PLAYER_NAME, Welcome to Sandgem Town.</speech>
        <speech>You should visit Professor Rowan's lab, I heard he is giving Pokémon to aspiring trainers.</speech>
    </npc>
    <npc direction="DOWN" hidden="false" id="7" name="" sprite="187" x="18" y="5">
        <speech>Sandgem Town - The Sandy town connected to the ocean.</speech>
        <speech>(Left) Route 201</speech>
        <speech>(Up) Route 202</speech>
        <speech>(Down) Route 219</speech>
    </npc>
</npcs>
