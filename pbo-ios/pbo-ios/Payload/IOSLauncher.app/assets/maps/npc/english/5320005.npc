<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>The locked door only opens with a special key.</speech>
            <speech>Now, if I was a comedy relief sort of bad guy, I'd tell you...</speech>
            <speech>But I really don't know...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>You're too young to understand the changing times. Stand aside and let Team Galactic shape the future!</speech>
        </speeches>
        <speeches id="2">
            <speech>I failed Team Galactic.</speech>
        </speeches>
        <speeches id="3">
            <speech>I failed Team Galactic.</speech>
        </speeches>
        <speeches id="4">
            <speech>I made our commander proud.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Intruder alert! There is something really smelly about you!</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh, it was my my own Pokemon's smell...</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh, it was my my own Pokemon's smell...</speech>
        </speeches>
        <speeches id="4">
            <speech>Yep, I was not wrong about you.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>The door is locked.</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>The door is locked.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Hey there, little trainer! You're famous among Team Galactic.</speech>
            <speech>The order has been issued to seek and defeat you!</speech>
        </speeches>
        <speeches id="2">
            <speech>I just blew my promotion...</speech>
        </speeches>
        <speeches id="3">
            <speech>I just blew my promotion...</speech>
        </speeches>
        <speeches id="4">
            <speech>Yes! Yes! Yes!</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Are you enjoying your unescorted, unauthorized, and unsettling tour of Team Galactic HQ?</speech>
        </speeches>
        <speeches id="2">
            <speech>Let me do what I want...</speech>
        </speeches>
        <speeches id="3">
            <speech>Let me do what I want...</speech>
        </speeches>
        <speeches id="4">
            <speech>Let me escort you outside of the building.</speech>
        </speeches>
        <speeches id="5">
            <speech/>
        </speeches>
    </conversation>
</npcs>
