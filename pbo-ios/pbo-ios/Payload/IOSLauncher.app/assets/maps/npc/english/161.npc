<npcs>
	<npc id="1000" x="15" y="25" direction="DOWN" name="Guide Hari" sprite="23">
    <speech>Greetings, challenger! Ghadafi is a user of rock-type Pokemon.</speech>
		<speech>Water, grass and ground-types all fare well against him.</speech>
		<speech>Don't underestimate his rock-types, especially in a sandstorm.</speech>
		<speech>Good luck! And may the (sheer) force be with you.</speech>
  </npc>
	<conversation id="5">
			<speeches id="1">
					<speech>I'm Ghadafi, the rock-type gym leader of $REGION_NAME.</speech>
					<speech>You're here to challenge me? That's interesting, cause two kids walked in here earlier saying the same thing.</speech>
					<speech>But hey, I'm not complaining. Better three challengers than none, huh.</speech>
					<speech>Anyway,you think you’ve got what it takes to beat me and my battle-hardened rock types</speech>
					<speech>You'd better be prepared for some rock-hard action, kid, cause we're about to find out!</speech>
			</speeches>
			<speeches id="2">
					<speech>That was pretty good, kid.</speech>
					<speech>You said your name was $PLAYER_NAME? Well, $PLAYER_NAME, here's your first gym badge.</speech>
					<speech>It's the Crystal Badge - a symbol of rockhard determination and the pride of Patthar Village, yadda yadda.</speech>
					<speech>Also, take this TM. It contains Sandstorm - the perfect weather for those with a rock-hard determination.</speech>
			</speeches>
			<speeches id="3">
				<speech>Three straight losses in one day, guess I'm outta practice, huh?</speech>
				<speech>Or maybe I'm just getting soft ...</speech>
			</speeches>
			<speeches id="4">
					<speech>Train more, kid. You ain't strong enough to break us down just yet.</speech>
			</speeches>
	</conversation>
	<conversation id="2">
			<speeches id="1">
					<speech>Only those who want to win should challenge a Pokémon Gym.</speech>
			</speeches>
			<speeches id="2">
					<speech>Looks like you want to win.</speech>
			</speeches>
			<speeches id="3">
					<speech>Good luck, then.</speech>
			</speeches>
			<speeches id="4">
					<speech>Looks like you don't want to win.</speech>
			</speeches>
	</conversation>
	<conversation id="3">
			<speeches id="1">
					<speech>Patthar Village Pokemon Gym</speech>
					<speech>Certified trainers: Sai, Ayaan</speech>
			</speeches>
			<speeches id="2">
				<speech>Patthar Village Pokemon Gym</speech>
				<speech>Certified trainers: Sai, Ayaan, $PLAYER_NAME</speech>
			</speeches>
	</conversation>
	<conversation id="4">
			<speeches id="1">
					<speech>Patthar Village Pokemon Gym</speech>
					<speech>Certified trainers: Sai, Ayaan</speech>
			</speeches>
			<speeches id="2">
				<speech>Patthar Village Pokemon Gym</speech>
				<speech>Certified trainers: Sai, Ayaan, $PLAYER_NAME</speech>
			</speeches>
	</conversation>
</npcs>
