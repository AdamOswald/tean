<npcs>
    <conversation id="2">
        <speeches id="1">
            <speech>It's no holds barred on this journey! Where's my adventure?!</speech>
        </speeches>
        <speeches id="2">
            <speech>Sniff, sniff... This is no good... I can't smell the perfume of love. Bye!</speech>
        </speeches>
        <speeches id="3">
            <speech>Sniff, sniff... This is no good... I can't smell the perfume of love. Bye!</speech>
        </speeches>
        <speeches id="4">
            <speech>The journey isn't over. Just you wait! I'll show you the greatest adventure ever!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>You look so serious and boring... Can you keep me entertained?</speech>
        </speeches>
        <speeches id="2">
            <speech>Ah... You weren't bad... Which only makes me miserable...</speech>
        </speeches>
        <speeches id="3">
            <speech>Ah... You weren't bad... Which only makes me miserable...</speech>
        </speeches>
        <speeches id="4">
            <speech>Hey, we just got going! This is where it starts getting good!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>Huhuehuehue... No crying when you lose...</speech>
        </speeches>
        <speeches id="2">
            <speech>Sniffle... Sniffle sniffle... I'm disappointed... So disappointed...</speech>
        </speeches>
        <speeches id="3">
            <speech>Sniffle... Sniffle sniffle... I'm disappointed... So disappointed...</speech>
        </speeches>
        <speeches id="4">
            <speech>Hey, hey! No crying! I've got no time for some kid's tears!</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>Ahhh, a Trainer who looks gorgeous! I hope your battle is just as beautiful.</speech>
        </speeches>
        <speeches id="2">
            <speech>Oh my, our battle was just as gorgeous. I feel drawn to you.</speech>
        </speeches>
        <speeches id="3">
            <speech>Oh my, our battle was just as gorgeous. I feel drawn to you.</speech>
        </speeches>
        <speeches id="4">
            <speech>Such a looker lost to me?! I'm a little disappointed.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Are you aware of what it takes to be a Trainer?</speech>
        </speeches>
        <speeches id="2">
            <speech>You can't become a Trainer battling like that.</speech>
        </speeches>
        <speeches id="3">
            <speech>You can't become a Trainer battling like that.</speech>
        </speeches>
        <speeches id="4">
            <speech>Of course I'm strong and don't lose. It's important that I win gracefully.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>No matter how speedy the Pokémon is, I'll catch it on my super-speedy bike!</speech>
        </speeches>
        <speeches id="2">
            <speech>I can sing, dance, and bike. Now I'll try to become an idol who can battle, too.</speech>
        </speeches>
        <speeches id="3">
            <speech>I can sing, dance, and bike. Now I'll try to become an idol who can battle, too.</speech>
        </speeches>
        <speeches id="4">
            <speech>Man, I'm so speedy and smooth! I should be on So You Think You Can Bike!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>Just because I'm Daddy's little girl, it doesn't necessarily mean I'm ladylike!</speech>
        </speeches>
        <speeches id="2">
            <speech>That strength... You're like a thriving roadside weed...</speech>
        </speeches>
        <speeches id="3">
            <speech>That strength... You're like a thriving roadside weed...</speech>
        </speeches>
        <speeches id="4">
            <speech>I do what I want! I live how I please! That's the way Daddy's little girl rolls!</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Father... Mother... Watch over my battle...</speech>
        </speeches>
        <speeches id="2">
            <speech>Father... Mother... What should I do?</speech>
        </speeches>
        <speeches id="3">
            <speech>Father... Mother... What should I do?</speech>
        </speeches>
        <speeches id="4">
            <speech>Father... Mother... Did you see? I won a battle... I really won!</speech>
        </speeches>
    </conversation>
    <conversation id="11">
        <speeches id="1">
            <speech>Ho there! You are a mountain standing in my way, aren't ya?</speech>
        </speeches>
        <speeches id="2">
            <speech>Grrr... My victory has disappeared down into some dark crevasse...</speech>
        </speeches>
        <speeches id="3">
            <speech>Grrr... My victory has disappeared down into some dark crevasse...</speech>
        </speeches>
        <speeches id="4">
            <speech>Yahoo! Yahooooo!! Hear my cry of triumph!</speech>
        </speeches>
    </conversation>
    <conversation id="12">
        <speeches id="1">
            <speech>I see you have proved your worth and are strong enough to survive with other tamers inside.</speech>
            <speech>I will allow you to enter the Wayward cave and test yourself out.</speech>
        </speeches>
        <speeches id="2">
            <speech>So you want to enter Wayward cave?</speech>
            <speech>No, I cannot let you pass kid. You are not strong enough.</speech>
            <speech>You need to defeat the Champion Cynthia and must record at least 100 Pokemon on your dex.</speech>
            <speech>Let's see whether you are capable or not.</speech>
        </speeches>
    </conversation>

    <conversation id="13">
        <speeches id="2">
            <speech>Hi! I'm a PBO Tutorial campaign clown. Let's roll out my question!</speech>
            <speech>Can you find swarms every day in PBO and hunt rare Pokemon?</speech>
        </speeches>
        <speeches id="3">
            <speech>That's not the correct answer. Let's try again.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ding-ding!</speech>
            <speech>You're absolutely correct.</speech>
            <speech>Every day you will be able to see that there are swarms in Sinnoh's Region!</speech>
            <speech>I highly recommend you to go check them out! You might find them all!</speech>
        </speeches>
        <speeches id="5">
            <speech>Here you go! Please accept this Great Ball!</speech>
            <speech>Hopefully you will catch an Ultra Rare Pokemon with it!</speech>
        </speeches>
    </conversation>
</npcs>
