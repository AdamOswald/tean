<npcs>
    <npc direction="RIGHT" id="1000" name="Assistant Bill" sprite="8" x="64" y="45">
        <speech>There are so many weird stones like this around Jvaloh.</speech>
        <speech>What if they are all connected?</speech>
    </npc>
    <npc direction="DOWN" id="1001" name="Tom" sprite="52" x="42" y="15">
        <speech>Forest, fresh air and a lovely weather.</speech>
        <speech>Best days of my life!</speech>
    </npc>
    <npc direction="LEFT" id="1002" name="Aventurer Matheus" randomRotation="true" sprite="74" x="15" y="38">
        <speech>Mysterious Pokémon all over the world!</speech>
        <speech>I am catching them all!</speech>
    </npc>
    <npc direction="RIGHT" id="1003" name="Aventurer Roberta" randomRotation="true" sprite="74" x="11" y="34">
        <speech>Secret items all over the world!</speech>
        <speech>I am finding them all!</speech>
    </npc>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech/>
        </speeches>
        <speeches id="2">
            <speech>Zang... Zangooo...</speech>
            <speech>Goos Goos!!!!!!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="2">
        <speeches id="1">
            <speech/>
        </speeches>
        <speeches id="2">
            <speech>Viperrr... Seviii...</speech>
            <speech>Hissssssss!!!!!!</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="3">
        <speeches id="1">
            <speech>This forest is going through major crisis.</speech>
            <speech>Both Seviper and Zangoose have somehow managed to escapse their natural habitat and are now trying
                to take over this territory.
            </speech>
            <speech>They need to be stopped else this forest will lose the peace its known for.</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="4">
        <speeches id="1">
            <speech/>
        </speeches>
        <speeches id="2">
            <speech>Viperrr... Seviii...</speech>
            <speech>Vipe Vipe Viperrrrrrr.......</speech>
        </speeches>
    </conversation>
    <conversation canSkip="false" id="5">
        <speeches id="1">
            <speech/>
        </speeches>
        <speeches id="2">
            <speech>Zang... Zangooo...</speech>
            <speech>Goos Goos GOOOOOOOOOSSSSSSS......</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Zang.. Zangoose......</speech>
        </speeches>
        <speeches id="2">
            <speech>Gooseeee!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>*Zangoose seems to be gesturing you to go away, and return in a day*.</speech>
        </speeches>
        <speeches id="4">
            <speech>Zang!! Zangoose!!</speech>
        </speeches>
        <speeches id="5">
            <speech>*Zangoose doesn't seem to acknowledge you yet*.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Sevi.. Seviperrr......</speech>
        </speeches>
        <speeches id="2">
            <speech>Viperrrrr!!!</speech>
        </speeches>
        <speeches id="3">
            <speech>*Seviper seems to be gesturing you to go away, and return in a day*.</speech>
        </speeches>
        <speeches id="4">
            <speech>Sevi!! Seviperr!!</speech>
        </speeches>
        <speeches id="5">
            <speech>*Seviper doesn't seem to acknowledge you yet*.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Your Pokémon look tired. Would you like me to heal them&gt;</speech>
        </speeches>
        <speeches id="2">
            <speech>There you go, all healthy and happy!</speech>
        </speeches>
        <speeches id="3">
            <speech>Aww, I'm sure they would have liked to rest.</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh, I can only heal your Pokémon if you have PBO membership. You can buy one from donator shop.</speech>
        </speeches>
    </conversation>
</npcs>
