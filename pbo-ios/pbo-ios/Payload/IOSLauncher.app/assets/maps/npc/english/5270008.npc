<npcs>
    <npc direction="UP" hidden="false" id="1" name="Serenity" sprite="6" x="7" y="4">
        <speech>Mind and matter.</speech>
        <speech>It's no good if one is stronger than the other.</speech>
        <speech>Balance is what's needed.</speech>
        <speech>That's the key.</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="2" name="Silas" sprite="25" x="2" y="4">
        <speech>And there do I see my father.</speech>
        <speech>My son. My life.</speech>
        <speech>And there do I see nature.</speech>
        <speech>Pokémon.</speech>
        <speech>The world.</speech>
    </npc>
    <npc direction="UP" hidden="false" id="3" name="Komolika" sprite="28" x="4" y="7">
        <speech>That people are lonely is only natural.</speech>
        <speech>It gives me compassion for others.</speech>
        <speech>It's what makes me look forward to a better tomorrow.</speech>
        <speech>But there are still moments of fondness for the past.</speech>
        <speech>Though, time can heal some sadness...</speech>
    </npc>
    <npc direction="UP" hidden="false" id="4" name="Justin" sprite="39" x="5" y="9">
        <speech>There are still words that not everyone can describe...</speech>
        <speech>The words are "love" and "joy."</speech>
    </npc>
    <npc direction="UP" hidden="false" id="5" name="Gabriella" sprite="17" x="10" y="12">
        <speech>Pokémon... People... It's only natural that we are all so very different.</speech>
        <speech>Make sure that you never judge a Pokémon on if it's weak or strong.</speech>
        <speech>You must always look for the good inside of them. That's what counts!</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="6" name="Scott" sprite="48" x="12" y="4">
        <speech>The art of crafting things fatigues one's spirit.</speech>
        <speech>When the spirit is healed, the desire to make somehting returns.</speech>
        <speech>It is such a wondrous cycle.</speech>
    </npc>
    <npc direction="LEFT" hidden="false" id="7" name="Max" sprite="23" x="14" y="5">
        <speech>If the strong and able do too much, they limit the contributions of others.</speech>
        <speech>The strong must show restraint.</speech>
        <speech>This enables everyone to live together and share responsability.</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="8" name="Luca" sprite="2" x="1" y="6">
        <speech>When people and Pokémon join hands, everyone's happy.</speech>
        <speech>It makes everyone come together.</speech>
        <speech>It could even make the world one!</speech>
    </npc>
    <npc direction="RIGHT" hidden="false" id="9" name="Ella" sprite="12" x="1" y="10">
        <speech>We cannot read the minds of others, which causes us to feel fear and doubt.</speech>
        <speech>But to control the aspects of the world beyond our senses is an impossibility.</speech>
    </npc>
</npcs>
