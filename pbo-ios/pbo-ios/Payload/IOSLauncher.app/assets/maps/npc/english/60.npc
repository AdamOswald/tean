<npcs>
    <conversation canSkip="false" id="1">
        <speeches id="1">
            <speech>Hello $PLAYER_NAME. Welcome to my Gym.</speech>
            <speech>Like you know, I am Blitz, a passionate lover of fire types and a gym leader of the Jvaloh region!</speech>
            <speech>Let me warn you, though - me and my fire types can burn.</speech>
            <speech>Make sure you've stocked up on some burn heals, just in case.</speech>
            <speech>Enough talking, it's time for some action. Let's go!!</speech>
        </speeches>
        <speeches id="2">
            <speech>That was hot! Great job right there!</speech>
            <speech>Oh and before I forget, take this TM as well.</speech>
            <speech>It contains sunny day, so it'll allow you to keep shining brightly like the star you are!</speech>
            <speech>Before you go, do you remember the staircase in the room where you saw Horus?</speech>
            <speech>There is a staircase there which leads to Ninetales.</speech>
            <speech>That is a great training spot. Go check it out.</speech>
        </speeches>
        <speeches id="3">
            <speech>People often say I'm overdressed for someone who stays near a volcano for most of his day.</speech>
            <speech>However, I disagree!</speech>
            <speech>Before you go, do you remember the staircase in the room where you saw Horus?</speech>
            <speech>There is a staircase there which leads to Ninetales.</speech>
            <speech>That is a great training spot. Go check it out.</speech>
        </speeches>
        <speeches id="4">
            <speech>Looks like you got BURNT!</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>This will be the easiest fight of my life!</speech>
        </speeches>
        <speeches id="2">
            <speech>No! It can't be!</speech>
        </speeches>
        <speeches id="3">
            <speech>No! It can't be!</speech>
        </speeches>
        <speeches id="4">
            <speech>So easy, I can't believe it.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>Tell me, when did you wake up this morning?</speech>
        </speeches>
        <speeches id="2">
            <speech>No, it can't be!</speech>
        </speeches>
        <speeches id="3">
            <speech>No, it can't be!</speech>
        </speeches>
        <speeches id="4">
            <speech>You need to wake up a lot earlier than that to beat me!</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>He is not here. This is his Volcano.</speech>
            <speech>It feels so odd to not see him at the peak of the volcano.</speech>
            <speech>Where is he? Please find him...</speech>
        </speeches>
    </conversation>
</npcs>
