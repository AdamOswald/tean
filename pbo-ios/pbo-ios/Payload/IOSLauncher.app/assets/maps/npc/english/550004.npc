<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Help, me young man, oh please, help me! </speech>
            <speech>I have been robbed of my dearest friend. </speech>
            <speech>My beloved Spiritomb has vanished!</speech>
            <speech>Would you be so kind as to find and bring back my soulmate to me? </speech>
        </speeches>
        <speeches id="2">
        <speech>You&apos;re back! Please tell me you have good news for me. </speech>
        <speech>Have you come to bring back my Spiritomb to me?</speech>
        </speeches>
        <speeches id="3">
            <speech>*Sheds a tear* Oh no... </speech>
            <speech>*You see the old lady is heartbroken and left all alone* </speech>
        </speeches>
        <speeches id="4">
            <speech>Oh thank you, young traveller.</speech>
            <speech>I hope my friend didn&apos;t cause you too much trouble.</speech>
            <speech>Err, I meant Spiritomb...</speech>
            <speech>Goodbye, for now...</speech>
        </speeches>
        <speeches id="5">
            <speech>Oh thank you, young traveller.</speech>
            <speech>I hope my friend didn&apos;t cause you too much trouble.</speech>
            <speech>Err, I meant Spiritomb...</speech>
            <speech>Goodbye, for now...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>A spook in the shadows;
                sinister and dark;
                it tastes your life;
                yet leaves no mark~</speech>
        </speeches>
        <speeches id="2">
            <speech>A spook in the shadows;
                sinister and dark;
                it tastes your life:
                yet leaves no mark~</speech>
            <speech>Call me a weirdo, call me a freak, but, $PLAYER_NAME, is this the pokemon that I seek?</speech>
        </speeches>
        <speeches id="3">
            <speech>There&apos;s no right, there&apos;s no wrong, but this isn&apos;t what I want; BE GONE!</speech>
        </speeches>
        <speeches id="4">
            <speech>Splendid, young master, I&apos;m happy for you.</speech>
            <speech>But tell me, dear $PLAYER_NAME: are you ready for round two?</speech>
        </speeches>
        <speeches id="5">
            <speech>Splendid, young master, I&apos;m happy for you.</speech>
            <speech>But tell me, dear $PLAYER_NAME: are you ready for round two?</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>It brings the plague, or so they say:
                &quot;It is the nemesis of wheat and hay~&quot;
                It moves in groups and multiplies;
                it could do so much more, yet never tries~</speech>
        </speeches>
        <speeches id="2">
            <speech>I like the way you used to do, did you get my subtle clue?</speech>
        </speeches>
        <speeches id="3">
            <speech>For a moment I thought your mind was sharp and unique.
                Little do you know, few travellers have been ever so weak.</speech>
        </speeches>
        <speeches id="4">
            <speech>This is what I longed for, this is what I call a deal!
                Dear $PLAYER_NAME, welcome to the Cult of Spirits, please take this seal.</speech>
            <speech>With this small paper seal, you&apos;ll be able to see other members of the cult around the world.</speech>
            <speech>Be careful with it, $PLAYER_NAME. For once you&apos;ve shown your devotion, you cannot turn back!</speech>
            <speech>An infernal blast, a wave of wet,
                Or nature&apos;s own petals? You will not regret
                Make up your mind, be wary of your choice;
                If your soul and mind are alligned, you will rejoice.</speech>
        </speeches>
        <speeches id="5">
            <speech>This is what I longed for, this is what I call a deal!
                Dear $PLAYER_NAME, welcome to the Cult of Spirits, please take this seal.</speech>
            <speech>With this small paper seal, you&apos;ll be able to see other members of the cult around the world.</speech>
            <speech>Be careful with it, $PLAYER_NAME. For once you&apos;ve shown your devotion, you cannot turn back!</speech>
            <speech>An infernal blast, a wave of wet,
                Or nature&apos;s own petals? You will not regret
                Make up your mind, be wary of your choice;
                If your soul and mind are alligned, you will rejoice.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>You seek the mystical flames; you enjoy fiery games~</speech>
            <speech>If you wish to exceed your bounds; then you must bring the hounds.</speech>
            <speech>Do what I say and the flame will show you the way~</speech>
        </speeches>
        <speeches id="2">
            <speech>You bring the hounds; it is time for more rounds~</speech>
            <speech>Watch as the hellfire rages; echoeing the voice of the sages~</speech>
            <speech>Exceed your bounds; unleash the hounds?~</speech>
        </speeches>
        <speeches id="3">
            <speech>You pine for the flames; yet you curb their rage</speech>
            <speech>Unfortunate as it is; you shall never come of age~</speech>
        </speeches>
        <speeches id="4">
            <speech>The flames shall answer; on the night when it begins~</speech>
            <speech>The worlds shall align; in a harmony of flames!</speech>
        </speeches>
        <speeches id="5">
            <speech>Seek the hallow; seek the flame</speech>
            <speech>On the dark, fateful night; it will show you the true way</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>You seek the mystical tides; you enjoy the rush of the seas~</speech>
            <speech>Bring me the darkness of the sea; so that only the light remains~.</speech>
            <speech>Do what I say and the tides will sweep you to glory~</speech>
        </speeches>
        <speeches id="2">
            <speech>You bring the darkness; just as I had asked~</speech>
            <speech>Watch as the cursed oceans rise; exposing what was masked~</speech>
            <speech>Bring forth the seas; give me what I want, please?~</speech>
        </speeches>
        <speeches id="3">
            <speech>You reject the tides; you abandon the seas~</speech>
            <speech>Now you shall watch as its might brings you to your knees~</speech>
        </speeches>
        <speeches id="4">
            <speech>The tides shall answer; on the night when it begins~</speech>
            <speech>The worlds shall align; in a harmony of oceanic operetta~</speech>
        </speeches>
        <speeches id="5">
            <speech>Seek the hallow; seek the oceans~</speech>
            <speech>On the dark, fateful night; they will show you your true emotions~</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>You seek the haunted woods; you fear not the reaper's hoods~</speech>
            <speech>Bring me the thorn; bring me its curse~</speech>
            <speech>Do what I say; else our fate shall be worse~</speech>
        </speeches>
        <speeches id="2">
            <speech>You bring the thorn; you bring its dark pain~</speech>
            <speech>Now the cursed woods shall respond; with thunder and rain~</speech>
            <speech>The horror, the shame; it's not a game~</speech>
            <speech>Trust me, o' youngling; you'd wish you were never born~</speech>
            <speech>So lighten your burden, and give me the thorn?</speech>
        </speeches>
        <speeches id="3">
            <speech>You pine for the woods; but you show no dedication~</speech>
            <speech>What you need to do is a lot of meditiation~</speech>
        </speeches>
        <speeches id="4">
            <speech>The howling woods shall answer; on the night when it begins~</speech>
            <speech>The worlds shall align and the forests spring forth!</speech>
        </speeches>
        <speeches id="5">
            <speech>Seek the hallow; seek the woods;</speech>
            <speech>On the dark, fateful night; they will show you reality~</speech>
        </speeches>
    </conversation>
</npcs>
