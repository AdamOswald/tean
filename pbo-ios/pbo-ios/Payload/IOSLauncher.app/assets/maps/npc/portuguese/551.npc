<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>Your Pokémon... Show them to me...</speech>
        </speeches>
        <speeches id="2">
            <speech>Yes... You have good Pokémon... Pokémon must be happy to be raised by you...</speech>
        </speeches>
        <speeches id="3">
            <speech>Yes... You have good Pokémon... Pokémon must be happy to be raised by you...</speech>
        </speeches>
        <speeches id="4">
            <speech>All within my expectations... Nothing to be surprised about...</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>Even if people call you an Ace Trainer, it's not like you get anything special for it.</speech>
        </speeches>
        <speeches id="2">
            <speech>In the end, being good at battling alone isn't enough, no matter how strong you are.</speech>
        </speeches>
        <speeches id="3">
            <speech>In the end, being good at battling alone isn't enough, no matter how strong you are.</speech>
        </speeches>
        <speeches id="4">
            <speech>I'm just good at battling. I don't even have a job. I'm just another unemployed guy.</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>The pretty-suited Pokémon soldier who sprinkles love on the world appears!</speech>
        </speeches>
        <speeches id="2">
            <speech>Maybe I lose because I'm paying more attention to praying than to battling.</speech>
        </speeches>
        <speeches id="3">
            <speech>Maybe I lose because I'm paying more attention to praying than to battling.</speech>
        </speeches>
        <speeches id="4">
            <speech>I can't be defeated yet... I still have to protect all that is pretty in the world...</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I am the strongest Backpacker. I have lots of Pokémon in my Bag.</speech>
        </speeches>
        <speeches id="2">
            <speech>Dreaming about being free is the best part...</speech>
        </speeches>
        <speeches id="3">
            <speech>Dreaming about being free is the best part...</speech>
        </speeches>
        <speeches id="4">
            <speech>I have more Pokémon in my Bag! Oh... Wait... My Bag has a hole...</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>I'm gonna give you an experience so sweet that your eyes are gonna spin!</speech>
        </speeches>
        <speeches id="2">
            <speech>It's not like you really lose anything when you lose. As long as you enjoy it, that's enough.</speech>
        </speeches>
        <speeches id="3">
            <speech>It's not like you really lose anything when you lose. As long as you enjoy it, that's enough.</speech>
        </speeches>
        <speeches id="4">
            <speech>Phew... You are smoking hot! It's like a sweltering summer night in here!</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Sup! I'll give it all I've got! Let's do our best!!</speech>
        </speeches>
        <speeches id="2">
            <speech>At the end of a battle, out of breath... How cool is it? Totally!</speech>
        </speeches>
        <speeches id="3">
            <speech>At the end of a battle, out of breath... How cool is it? Totally!</speech>
        </speeches>
        <speeches id="4">
            <speech>Sup! Good work. I tried everything I could, but I'm still pretty disappointed, yo!</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I praise your courage in challenging me! For I am the one with the strongest kick!</speech>
        </speeches>
        <speeches id="2">
            <speech>Hmmm... If I was going to lose anyway, I was hoping to get totally messed up in the process.</speech>
        </speeches>
        <speeches id="3">
            <speech>Hmmm... If I was going to lose anyway, I was hoping to get totally messed up in the process.</speech>
        </speeches>
        <speeches id="4">
            <speech>Oh. The Pokémon did the fighting. My strong kick didn't help a bit.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>Because I'm an Ace Trainer, people think I'm a strong woman.</speech>
        </speeches>
        <speeches id="2">
            <speech>You have to be strong inside when there aren't many people who are stronger than you on the outside...</speech>
        </speeches>
        <speeches id="3">
            <speech>You have to be strong inside when there aren't many people who are stronger than you on the outside...</speech>
        </speeches>
        <speeches id="4">
            <speech>I thought I'd grow up to be a frail woman who looked like she'd break if you squeezed her too hard.</speech>
        </speeches>
    </conversation>
    <conversation id="10">
        <speeches id="1">
            <speech>I'm working very hard, but that doesn't mean that I'm strong.</speech>
        </speeches>
        <speeches id="2">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="3">
            <speech>You're a smart Trainer, considering you don't know very much.</speech>
        </speeches>
        <speeches id="4">
            <speech>What?! Even I can lose?! But I'm a battling genius!</speech>
        </speeches>
    </conversation>
</npcs>
