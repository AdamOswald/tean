<npcs>
    <conversation id="1">
        <speeches id="1">
            <speech>I, the great Dariole, fear nothing under the sky!</speech>
        </speeches>
        <speeches id="2">
            <speech>I've been inspired by our battle! I've suddenly thought of a new dish!</speech>
        </speeches>
        <speeches id="3">
            <speech>I've been inspired by our battle! I've suddenly thought of a new dish!</speech>
        </speeches>
        <speeches id="4">
            <speech>Feh! I will at least admit that you have a skill for feigning strength.</speech>
        </speeches>
    </conversation>
    <conversation id="2">
        <speeches id="1">
            <speech>All right! Here I come! I'll show you my power!</speech>
        </speeches>
        <speeches id="2">
            <speech>Whoa! You are incredible! I'm amazed and surprised!</speech>
        </speeches>
        <speeches id="3">
            <speech>Whoa! You are incredible! I'm amazed and surprised!</speech>
        </speeches>
        <speeches id="4">
            <speech>You amazed? You surprised? By the power of my Pokémon?!</speech>
        </speeches>
    </conversation>
    <conversation id="3">
        <speeches id="1">
            <speech>No need to waste time saying hello. Bring it on whenever you're ready!</speech>
        </speeches>
        <speeches id="2">
            <speech>I won't lose next time! Let's battle again sometime!</speech>
        </speeches>
        <speeches id="3">
            <speech>I won't lose next time! Let's battle again sometime!</speech>
        </speeches>
        <speeches id="4">
            <speech>What a match! I'm quite satisfied with the result.</speech>
        </speeches>
    </conversation>
    <conversation id="4">
        <speeches id="1">
            <speech>I don't care who you are or where you come from.</speech>
        </speeches>
        <speeches id="2">
            <speech>I need to rethink my relationship with my Pokemon.</speech>
        </speeches>
        <speeches id="3">
            <speech>I need to rethink my relationship with my Pokemon.</speech>
        </speeches>
        <speeches id="4">
            <speech>A label is not important, is it?After all, you are yourself, right?</speech>
        </speeches>
    </conversation>
    <conversation id="5">
        <speeches id="1">
            <speech>I am so obsessed with Pokémon, my wife is fit to burst with anger!</speech>
        </speeches>
        <speeches id="2">
            <speech>I got too hooked on Pokémon battles, so's I never did nothin' around the house.</speech>
        </speeches>
        <speeches id="3">
            <speech>I got too hooked on Pokémon battles, so's I never did nothin' around the house.</speech>
        </speeches>
        <speeches id="4">
            <speech>I don't want to go home, 'cause my wife is as scary as a Legendary Pokémon.</speech>
        </speeches>
    </conversation>
    <conversation id="6">
        <speeches id="1">
            <speech>Well, I'm going to do things my way, so feel free to battle however you like.</speech>
        </speeches>
        <speeches id="2">
            <speech>There's something nice and comfortable about the pace you and your Pokémon keep to.</speech>
        </speeches>
        <speeches id="3">
            <speech>There's something nice and comfortable about the pace you and your Pokémon keep to.</speech>
        </speeches>
        <speeches id="4">
            <speech>In the end, you have to go at your own pace. You can't help but be influenced by others.</speech>
        </speeches>
    </conversation>
    <conversation id="7">
        <speeches id="1">
            <speech>Oooh! I've spotted some handy prey! The hunt is about to begin... Game on!</speech>
        </speeches>
        <speeches id="2">
            <speech>Once you've made it this far, victory and defeat become meaningless.</speech>
        </speeches>
        <speeches id="3">
            <speech>Once you've made it this far, victory and defeat become meaningless.</speech>
        </speeches>
        <speeches id="4">
            <speech>Ohhh, a strong enemy! Is there a continue option somewhere?</speech>
        </speeches>
    </conversation>
    <conversation id="8">
        <speeches id="1">
            <speech>I've arrived from a distant island. May I please trouble you for a battle?</speech>
        </speeches>
        <speeches id="2">
            <speech>Doing too much of anything will wreck your body. Everything in moderation, OK?</speech>
        </speeches>
        <speeches id="3">
            <speech>Doing too much of anything will wreck your body. Everything in moderation, OK?</speech>
        </speeches>
        <speeches id="4">
            <speech>I was utterly inexperienced. I'd be grateful if I could be your pupil.</speech>
        </speeches>
    </conversation>
    <conversation id="9">
        <speeches id="1">
            <speech>S-so you've come to challenge me! Get too close, and I will saut you!</speech>
        </speeches>
        <speeches id="2">
            <speech>Stop! Just hold on a moment! I don't want to be flambed!</speech>
        </speeches>
        <speeches id="3">
            <speech>Stop! Just hold on a moment! I don't want to be flambed!</speech>
        </speeches>
        <speeches id="4">
            <speech>It...it...it's all your fault for challenging me! Next time I'll turn you into a tasty concasse!</speech>
        </speeches>
    </conversation>
</npcs>
